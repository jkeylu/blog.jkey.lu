<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[jKey Blog]]></title>
  <link href="http://blog.jkey.lu/atom.xml" rel="self"/>
  <link href="http://blog.jkey.lu"/>
  <updated>2014-01-13T14:28:46.824Z</updated>
  <id>http://blog.jkey.lu/</id>
  <author>
    <name><![CDATA[jKey Lu]]></name>
    <email><![CDATA[i@jkey.lu]]></email>
  </author>
  <generator uri="http://zespia.tw/hexo">Hexo</generator>
  <entry>
    <title type="html"><![CDATA[安装 Gentoo]]></title>
    <link href="http://blog.jkey.lu/2014/01/11/install-gentoo-linux/"/>
    <id>http://blog.jkey.lu/2014/01/11/install-gentoo-linux/</id>
    <published>2014-01-11T05:35:13.000Z</published>
    <updated>2014-01-13T14:28:12.000Z</updated>
    <content type="html"><![CDATA[<p>最近组了一台电脑想用做 nas，配置为</p>
<ul>
<li>奔腾G2100T</li>
<li>华擎 B75M-ITX 主板</li>
<li>DDR3 1600 2G 内存</li>
<li>先马 230W 电源</li>
<li>一块 64G SSD 加上另外三块从笔记本上拆下来的硬盘。</li>
</ul>
<p>原本 CPU 想用赛扬的，但是看中的一块淘宝上缺货了，所以用奔腾G2100T替代。所有都装好后进 BIOS 对 CPU 降低电压，稳定在 0.8V。装好 Gentoo 后，开机差不多在 37W 左右，编译的时候 45W 左右。虽然，对于当 nas 来用，37W 还是有点高的，但是，平时还可以在上面做其他的事，那么还是可以接受的。</p>
<p>第一次用 Gentoo，根据 Gentoo 手册 <a href="http://www.gentoo.org/doc/en/handbook/handbook-amd64.xml?full=1" target="_blank"><a href="http://www.gentoo.org/doc/en/handbook/handbook-amd64.xml?full=1">http://www.gentoo.org/doc/en/handbook/handbook-amd64.xml?full=1</a></a> 一步一步安装的，下面是安装过程中遇到的一些问题。</p>
<a id="more"></a>

<h3 id="-7f16-8bd1-5185-6838-7684-4e00-4e9b-9009-9879-">编译内核的一些选项</h3>
<p><a href="http://www.gentoo.org/doc/en/handbook/handbook-amd64.xml?full=1#book_part1_chap7" target="_blank"><a href="http://www.gentoo.org/doc/en/handbook/handbook-amd64.xml?full=1#book_part1_chap7">http://www.gentoo.org/doc/en/handbook/handbook-amd64.xml?full=1#book_part1_chap7</a></a></p>
<p>网卡</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="comment">Device</span> <span class="comment">Drivers</span>  <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>&gt;
  <span class="title">[</span><span class="comment">*</span><span class="title">]</span> <span class="comment">Network</span> <span class="comment">device</span> <span class="comment">support</span>  <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>&gt;
    <span class="title">[</span><span class="comment">*</span><span class="title">]</span> <span class="comment">Ethernet</span> <span class="comment">driver</span> <span class="comment">support</span>  <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>&gt;
      <span class="title">[</span><span class="comment">*</span><span class="title">]</span> <span class="comment">Realtek</span> <span class="comment">devices</span>
      &lt;<span class="comment">*</span>&gt;   <span class="comment">Realtek</span> <span class="comment">8169</span> <span class="comment">gigabit</span> <span class="comment">ethernet</span> <span class="comment">support</span>
</pre></td></tr></table></figure>

<p>lm sensors</p>
<p><a href="http://wiki.gentoo.org/wiki/Lm_sensors" target="_blank"><a href="http://wiki.gentoo.org/wiki/Lm_sensors">http://wiki.gentoo.org/wiki/Lm_sensors</a></a></p>
<p>电源管理</p>
<p><a href="http://wiki.gentoo.org/wiki/Power_management/Processor" target="_blank"><a href="http://wiki.gentoo.org/wiki/Power_management/Processor">http://wiki.gentoo.org/wiki/Power_management/Processor</a></a></p>
<p>ntfs</p>
<p><a href="https://wiki.gentoo.org/wiki/NTFS" target="_blank"><a href="https://wiki.gentoo.org/wiki/NTFS">https://wiki.gentoo.org/wiki/NTFS</a></a></p>
<p>iptables</p>
<p><a href="http://wiki.gentoo.org/wiki/Iptables" target="_blank"><a href="http://wiki.gentoo.org/wiki/Iptables">http://wiki.gentoo.org/wiki/Iptables</a></a></p>
<p>ntp</p>
<p><a href="https://wiki.gentoo.org/wiki/Ntp" target="_blank"><a href="https://wiki.gentoo.org/wiki/Ntp">https://wiki.gentoo.org/wiki/Ntp</a></a></p>
<h3 id="-7f16-8bd1-_node-js_-662f-62a5-9519-">编译 node.js 是报错</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>ImportError: This platform lacks a functioning sem_open <span class="class"><span class="keyword">implementation</span>, <span class="id">therefore</span>, <span class="id">the</span> <span class="id">required</span> <span class="id">synchronization</span> <span class="id">primitives</span> <span class="id">needed</span> <span class="id">will</span> <span class="id">not</span> <span class="id">function</span>, <span class="id">see</span> <span class="id">issue</span> 3770.</span>
</pre></td></tr></table></figure>

<p>解决方法: <a href="http://forums-lb.gentoo.org/viewtopic-t-976004.html" target="_blank"><a href="http://forums-lb.gentoo.org/viewtopic-t-976004.html">http://forums-lb.gentoo.org/viewtopic-t-976004.html</a></a></p>
<ol>
<li><p>Add this line to /etc/fstab EDITED: When using OpenRC, otherwise comment it out </p>
 <figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">tmpfs</span>   /dev/shm    tmpfs   defaults        <span class="number">0</span>   <span class="number">0</span>
</pre></td></tr></table></figure>
</li>
<li><p>Mount /dev/shm EDITED: When running OpenRC </p>
 <figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">mount</span> /dev/shm
</pre></td></tr></table></figure>
</li>
<li><p>Rebuild Python </p>
 <figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>emerge -qa <span class="keyword">python</span>:<span class="number">2.7</span> <span class="keyword">python</span>
</pre></td></tr></table></figure>
</li>
<li><p>Rebulid all Python stuff </p>
 <figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="comment">python</span><span class="literal">-</span><span class="comment">updater</span>
</pre></td></tr></table></figure>

</li>
</ol>
]]></content>
    <category scheme="http://blog.jkey.lu/tags/linux/" term="linux"/>
    <category scheme="http://blog.jkey.lu/tags/gentoo/" term="gentoo"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[vim 快捷键映射和模式]]></title>
    <link href="http://blog.jkey.lu/2013/09/15/vim-mapping-and-mode/"/>
    <id>http://blog.jkey.lu/2013/09/15/vim-mapping-and-mode/</id>
    <published>2013-09-15T08:17:15.000Z</published>
    <updated>2013-09-15T13:41:35.000Z</updated>
    <content type="html"><![CDATA[<p>以前在 vim 中映射快捷键时，不是网上看被人怎么写然后拷贝回来，要么直接用 ‘map’ 来映射，根本搞不懂 ‘map’, ‘noremap’, ‘nmap’, ‘vmap’ … 之间的区别到底是什么。</p>
<p>今天，上网 Google 了下，不过先要从 vim 的几种模式说起。</p>
<h2 id="vim_-4e2d-6709-516d-79cd-57fa-672c-6a21-5f0f-3a-">vim 中有六种基本模式:</h2>
<ol>
<li><p>普通模式 (Normal-mode)</p>
<p> 一般，启动编辑器之后就处于普通模式，除非你设置了 ‘insertmode’。也称为命令 (command) 模式。</p>
</li>
<li><p>可视模式 (Visual-mode)</p>
<p> 可视模式与普通模式相似，只是光标移动会扩展高亮的区域。而其它非移动命令会作用于高亮的区域。在普通模式下，可以通过 v 或 V 或 CTRL-V 进入。如果没有关闭 ‘showmode’ 选项，窗口底部会出现 “—VISUAL—“ 字样。</p>
</li>
<li><p>选择模式 (Select-mode)</p>
<p> 选择模式与 Windows 下其它编辑器的选择模式很像。选中字符后，键入一个可显示字符会删掉所有被选择的字符，并进入插入模式。一般，可以在普通模式下按 gh 进入，或在 gvim 中用鼠标拖选区域。窗口底部会出现 “—SELECT—“ 字样。</p>
</li>
<li><p>插入模式 (Insert-mode)</p>
<p> 插入模式下你键入的内容会插入到缓冲区。一般，在普通模式下按 i 或 a 进入插入模式。窗口底部会出现 “—INSERT—“ 字样。</p>
</li>
<li><p>命令行模式 (Cmdline-mode)</p>
<p> 命令行模式可以在窗口底部输入一行命令。可以用 “:” 执行命令，用 “?” 和 “/“ 来查找。</p>
</li>
<li><p>Ex 模式 (Ex-mode)</p>
<p> 与命令行模式类似，只是执行完一条命令后，会继续停留在 Ex 模式。在普通模式下，按 Q 进入 Ex 模式。</p>
</li>
</ol>
<a id="more"></a>

<h2 id="-5feb-6377-952e-6620-5c04-">快捷键映射</h2>
<p>快捷键映射分两种: map 和 noremap</p>
<h3 id="-9012-5f52-6620-5c04-_-28-map-29-">递归映射 (map)</h3>
<p>如果键 b 映射为键 a，然后键 c 映射为键 b，那么当按键 c 时会产生按键 a 的效果。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="symbol">:map</span> b a
<span class="symbol">:map</span> c b
</pre></td></tr></table></figure>

<p>相当于</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="symbol">:map</span> c a
</pre></td></tr></table></figure>

<h3 id="-975e-9012-5f52-6620-5c04-_-28-noremap-29-">非递归映射 (noremap)</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="symbol">:noremap</span> b a
<span class="symbol">:noremap</span> c b
</pre></td></tr></table></figure>

<p>非递归映射则不会产生递归映射一样的效果。</p>
<h2 id="-4e0d-540c-6a21-5f0f-4e0b-7684-5feb-6377-952e-6620-5c04-">不同模式下的快捷键映射</h2>
<p>在 map 与 noremap 前分别可以加 ‘n’, ‘v’, ‘x’, ‘s’, ‘o’, ‘i’, ‘l’, ‘c’ 以及 ‘map!’ 和 ‘noremap!’。</p>
<ul>
<li>n 表示在普通模式下生效，如 nmap, nnoremap</li>
<li>v 表示在可视模式下生效，如 vmap, vnoremap</li>
<li>s 表示在选择模式下生效，如 smap, snoremap</li>
<li>i 表示在插入模式下生效，如 imap, inoremap</li>
<li>c 表示在命令行模式下生效，如 cmap, cnoremap</li>
</ul>
<p>map 和 noremap 不加任何前缀的话，是 mapmode-nvo。会在普通模式，可视模式，操作符等待模式下生效。</p>
<h2 id="-6e05-9664-6a21-5f0f-">清除模式</h2>
<ul>
<li>unmap</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">unmap</span> {lhs}
</pre></td></tr></table></figure>

<p>在映射命令作用的模式中删除 {lhs} 的映射。该映射仍然可以在其它模式中保留其定义。</p>
<ul>
<li>mapclear</li>
</ul>
<p>在映射命令作用的模式中删除<em>所有</em>的映射。</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Nodejs Addons]]></title>
    <link href="http://blog.jkey.lu/2013/07/05/nodejs-addons/"/>
    <id>http://blog.jkey.lu/2013/07/05/nodejs-addons/</id>
    <published>2013-07-05T14:02:07.000Z</published>
    <updated>2013-07-06T05:50:51.000Z</updated>
    <content type="html"><![CDATA[<p>有时候仅仅用 javascript 并不能够实现我们想要的功能，比如说我最近买了一块 nokia 5110 的显示屏，想连在我的树莓派上显示一些有用的信息。而这块显示屏是 spi 接口的，树莓派上也是有 SPI 接口。但是我要对 SPI 接口写入信息传到显示屏上，就必须要用 c++ 来写，不是很方便。所以我就想写一个 nodejs 的 addon，最后可以实现 javascript 来与 SPI 总线进行通信。</p>
<p>所以，就要学习如何写一个 nodejs 的 addon，这篇文章完全参考 <a href="http://nodejs.org/api/addons.html" target="_blank"><a href="http://nodejs.org/api/addons.html">http://nodejs.org/api/addons.html</a></a></p>
<p>下面所有例子的代码可以从 <a href="https://github.com/rvagg/node-addon-examples" target="_blank"><a href="https://github.com/rvagg/node-addon-examples">https://github.com/rvagg/node-addon-examples</a></a> 下载到。</p>
<h2 id="Hello_world">Hello world</h2>
<p>我们要写一个简单的模块，这个模块的 javascript 代码实现如下，目标是把他转换为 c++ 实现的 Addon。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="transposed_variable">exports.</span>hello = <span class="function"><span class="keyword">function</span> <span class="params">()</span> { <span class="title">return</span> '<span class="title">world</span>'; };</span>
</pre></td></tr></table></figure>

<p>首先创建 <code>hello.cc</code>，内容如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="comment">#include &lt;node.h&gt;</span>
<span class="comment">#include &lt;v8.h&gt;</span>

using namespace v8;

/**
 * <span class="string">"Method"</span> 的名字可以任取，可以换成 <span class="string">"Hello"</span>
 * 来对应 <span class="built_in">exports</span> 的名称
 */
Handle&lt;Value&gt; Method(<span class="reserved">const</span> Arguments& args) {
  HandleScope scope;
  <span class="keyword">return</span> scope.Close(<span class="attribute">String</span>::New(<span class="string">"world"</span>));
}

<span class="reserved">void</span> Init(Handle&lt;Object&gt; <span class="built_in">exports</span>) {
  <span class="built_in">exports</span><span class="function">-&gt;</span>Set(<span class="attribute">String</span>::NewSymbol(<span class="string">"hello"</span>),
    <span class="attribute">FunctionTemplate</span>::New<span class="function"><span class="params">(Method)</span>-&gt;</span>GetFunction());
}

NODE_MODULE(hello, Init)
</pre></td></tr></table></figure>

<p>所有的 Node addons 必须输出一个初始化函数：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="keyword">void</span> Initialize(Handle&lt;<span class="built_in">Object</span>&gt; exports);
NODE_MODULE(module_name, Initialize)
</pre></td></tr></table></figure>

<a id="more"></a>

<p>注意 <code>NODE_MODULE</code> 后面是没有分号的，因为他是一个宏 (see <a href="https://github.com/joyent/node/blob/master/src/node.h" target="_blank">node.h</a>)</p>
<p><code>module_name</code> 需要和最终生成的二进制文件相同（不包括 .node 后缀）</p>
<p>为了把上面的 <code>hello.cc</code> 编译成 <code>hello.node</code> 二进制文件，我们要创建一个 <code>binding.gyp</code> 文件，它是用来描述你编译模块用到的配置，格式是 JSON 风格的。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>{
  "<span class="attribute">targets</span>": <span class="value">[
    {
      "<span class="attribute">target_name</span>": <span class="value"><span class="string">"hello"</span></span>,
      "<span class="attribute">sources</span>": <span class="value">[ <span class="string">"hello.cc"</span> ]
    </span>}
  ]
</span>}
</pre></td></tr></table></figure>

<p>真正编译成二进制文件我们需要 <a href="https://github.com/TooTallNate/node-gyp" target="_blank">node-gyp</a> 工具。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="comment">npm</span> <span class="comment">install</span> <span class="literal">-</span><span class="comment">g</span> <span class="comment">node</span><span class="literal">-</span><span class="comment">gyp</span>
</pre></td></tr></table></figure>

<p>安装好 node-gyp 后，先要生成与当前平台相关的项目生成文件。运行下面命令</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="comment">node</span><span class="literal">-</span><span class="comment">gyp</span> <span class="comment">configure</span>
</pre></td></tr></table></figure>

<p>然后你会发现在我的的项目文件夹中多出了一个 <code>build/</code> 文件夹，里面包含了 <code>Makefile</code> (linux 平台) 或 <code>vcxproj</code> (windows 平台) 文件。</p>
<p>然后运行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="comment">node</span><span class="literal">-</span><span class="comment">gyp</span> <span class="comment">build</span>
</pre></td></tr></table></figure>

<p>编译完成后，可以在 <code>build/Release/</code> 下看到 <code>hello.node</code> 文件。</p>
<p>然后测试一下这个模块，创建 <code>hello.js</code> 文件，内容如下。执行 <code>node hello.js</code> 后看看是否会输出正确的结果。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="built_in">var</span> addon <span class="subst">=</span> <span class="keyword">require</span>(<span class="string">'./build/Release/hello'</span>);
console<span class="built_in">.</span><span class="keyword">log</span>(addon<span class="built_in">.</span>hello()); <span class="comment">// 'world'</span>
</pre></td></tr></table></figure>

<h2 id="Addon_patterns">Addon patterns</h2>
<p>下面是一些 addon patterns 的例子。可以通过查阅 <a href="http://izs.me/v8-docs/main.html" target="_blank">v8 reference</a> 和 <a href="http://code.google.com/apis/v8/embed.html" target="_blank">Embedder’s Guide</a> 获得更多帮助。</p>
<h3 id="Function_arguments">Function arguments</h3>
<p>javascript 实现：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre>exports.add = <span class="function"><span class="keyword">function</span> <span class="params">(a, b)</span> {</span>
  <span class="keyword">if</span> (arguments.length &lt; <span class="number">2</span>) {
    <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">'Wrong number of arguments'</span>);
    <span class="keyword">return</span>;
  }

  <span class="function"><span class="keyword">function</span> <span class="title">isNum</span><span class="params">(s)</span> {</span>
    <span class="keyword">if</span> (s!=<span class="literal">null</span> && s!=<span class="string">''</span>) {
      <span class="keyword">return</span> !isNaN(s);
    }
    reutrn <span class="literal">false</span>;
  }

  <span class="keyword">if</span> (!isNum(a) || !isNum(b)) {
    <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">'Wrong arguments'</span>);
    <span class="keyword">return</span>;
  }

  <span class="keyword">return</span> a + b;
};
</pre></td></tr></table></figure>

<p>c++ 实现：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="code"><pre><span class="comment">#define BUILDING_NODE_EXTENSION</span>
<span class="comment">#include &lt;node.h&gt;</span>

using namespace v8;

Handle&lt;Value&gt; Add(<span class="reserved">const</span> Arguments& args) {
  HandleScope scope;

  <span class="keyword">if</span> (args.Length() &lt; <span class="number">2</span>) {
    ThrowException(<span class="attribute">Exception</span>::TypeError(<span class="attribute">String</span>::New(<span class="string">"Wrong number of arguments"</span>)));
    <span class="keyword">return</span> scope.Close(Undefined());
  }

  <span class="keyword">if</span> (!args[<span class="number">0</span>]<span class="function">-&gt;</span>IsNumber() || !args[<span class="number">1</span>]<span class="function">-&gt;</span>IsNumber()) {
    Throwexception(<span class="attribute">Exception</span>::TypeError(<span class="attribute">String</span>::New(<span class="string">"Wrong arguments"</span>)));
    <span class="keyword">return</span> scope.Close(Undefined());
  }

  Local&lt;Number&gt; num = <span class="attribute">Number</span>::New(args[<span class="number">0</span>]<span class="function">-&gt;</span>NumberValue() +
      args[<span class="number">1</span>]<span class="function">-&gt;</span>NumberValue());
  <span class="keyword">return</span> scope.Close(num);
}

<span class="reserved">void</span> Init(Handle&lt;Object&gt; <span class="built_in">exports</span>) {
  <span class="built_in">exports</span><span class="function">-&gt;</span>Set(<span class="attribute">String</span>::NewSymbol(<span class="string">"add"</span>),
      <span class="attribute">FunctionTemplate</span>::New<span class="function"><span class="params">(Add)</span>-&gt;</span>GetFunction());
}

NODE_MODULE(addon, Init)
</pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>var addon = require(<span class="comment">'./build/Release/addon');</span>
console.<span class="built_in">log</span>(<span class="comment">'This should be eight: ', addon.add(3, 8));</span>
</pre></td></tr></table></figure>

<h3 id="Callbacks">Callbacks</h3>
<p>javascript 实现：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="params">(cb)</span></span> {
  cb(<span class="string">'hello world'</span>);
};
</pre></td></tr></table></figure>

<p>c++ 实现：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre><span class="comment">#define BUILDING_NODE_EXTENSION</span>
<span class="comment">#include &lt;node.h&gt;</span>

using namespace v8;

Handle&lt;Value&gt; RunCallback(<span class="reserved">const</span> Arguments& args) {
  HandleScope scope;

  Local&lt;Function&gt; cb = Local&lt;Function&gt;::Cast(args[<span class="number">0</span>]);
  <span class="reserved">const</span> unsigned argc = <span class="number">1</span>;
  Local&lt;Value&gt; argv[argc] = { Local&lt;Value&gt;::New(<span class="attribute">String</span>::New(<span class="string">"hello world"</span>)) };
  cb<span class="function">-&gt;</span>Call<span class="function"><span class="params">(Context::GetCurrent()-&gt;Global(), argc, argv)</span>;

  <span class="title">return</span> <span class="title">scope</span>.<span class="title">Close</span><span class="params">(Undefined())</span>;
}

<span class="title">Void</span> <span class="title">Init</span><span class="params">(Handle&lt;Object&gt; <span class="built_in">exports</span>, Handle&lt;Object&gt; <span class="built_in">module</span>)</span> {
  <span class="title">module</span>-&gt;</span>Set(<span class="attribute">String</span>::NewSymbol(<span class="string">"exports"</span>),
    <span class="attribute">FunctionTemplate</span>::New<span class="function"><span class="params">(RunCallback)</span>-&gt;</span>GetFunction());
}

NODE_MODULE(addon, Init)
</pre></td></tr></table></figure>

<p>注意这个例子中 <code>Init()</code> 接收了两个参数，因为模块要直接暴露函数，和 javascript 一样。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="function"><span class="keyword">function</span> <span class="title">hello</span> <span class="params">()</span> <span class="comment">{}</span>

<span class="title">moudle</span>.<span class="title">exports</span>.<span class="title">hello</span> = <span class="title">hello</span>;</span> <span class="comment">// 通过模块的一个属性来暴露函数</span>

module.<span class="keyword">exports</span> = hello; <span class="comment">// 暴露一个函数</span>
</pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="keyword">var</span> addon = <span class="keyword">require</span>(<span class="string">'./build/Release/addon'</span>);

addon(<span class="function"><span class="keyword">function</span> <span class="params">(msg)</span> {</span>
  console.log(msg); <span class="comment">// 'hello world'</span>
});
</pre></td></tr></table></figure>

<h3 id="Object_factory">Object factory</h3>
<p>javascript 实现：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="transposed_variable">module.</span>exports = <span class="function"><span class="keyword">function</span> <span class="params">(msg)</span> {</span>
  var obj = <span class="cell">{}</span>;
  <span class="transposed_variable">obj.</span>msg = msg;
  <span class="keyword">return</span> obj;
};
</pre></td></tr></table></figure>

<p>c++ 实现：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="comment">#define BUILDING_NODE_EXTENSION</span>
<span class="comment">#include &lt;node.h&gt;</span>

using namespace v8;

Handle&lt;Value&gt; CreateObject(<span class="reserved">const</span> Arguments& args) {
  HandleScope scope;

  Local&lt;Object&gt; obj = <span class="attribute">Object</span>::New();
  obj<span class="function">-&gt;</span>Set(<span class="attribute">String</span>::NewSymbol(<span class="string">"msg"</span>), args[<span class="number">0</span>]<span class="function">-&gt;</span>ToString());

  <span class="keyword">return</span> scope.Close(obj);
}

<span class="reserved">void</span> Init(Handle&lt;Object&gt; <span class="built_in">exports</span>, Handle&lt;Object&gt; <span class="built_in">module</span>) {
  <span class="built_in">module</span><span class="function">-&gt;</span>Set(<span class="attribute">String</span>::NewSymbol(<span class="string">"exports"</span>),
      <span class="attribute">FunctionTemplate</span>::New<span class="function"><span class="params">(CreateObject)</span>-&gt;</span>GetFunction());
}

NODE_MODULE(addon, Init)
</pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="built_in">var</span> addon <span class="subst">=</span> <span class="keyword">require</span>(<span class="string">'./build/Release/addon'</span>);

<span class="built_in">var</span> obj1 <span class="subst">=</span> addon(<span class="string">'hello'</span>);
<span class="built_in">var</span> obj2 <span class="subst">=</span> addon(<span class="string">'world'</span>);
console<span class="built_in">.</span><span class="keyword">log</span>(obj1<span class="built_in">.</span>msg <span class="subst">+</span> <span class="string">' '</span> <span class="subst">+</span> obj2<span class="built_in">.</span>msg); <span class="comment">// 'hello world'</span>
</pre></td></tr></table></figure>

<h3 id="Function_factory">Function factory</h3>
<p>javascript 实现：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> <span class="params">()</span></span> {
  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="params">()</span></span> {
    <span class="keyword">return</span> <span class="string">'hello world'</span>;
  };
};
</pre></td></tr></table></figure>

<p>c++ 实现：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre><span class="comment">#define BUILDING_NODE_EXTENSION</span>
<span class="comment">#include &lt;node.h&gt;</span>

using <span class="keyword">namespace</span> v8;

Handle&lt;Value&gt; MyFunction(<span class="keyword">const</span> Arguments& args) {
  HandleScope scope;
  <span class="keyword">return</span> scope.Close(String::<span class="keyword">New</span>(<span class="string">"hello world"</span>));
}

Handle&lt;Value&gt; CreateFunction(<span class="keyword">const</span> Arguments& args) {
  HandleScope scope;

  Local&lt;FunctionTemplate&gt; tpl = FunctionTemplate::<span class="keyword">New</span>(MyFunction); <span class="comment">// 把 MyFunction 转换为对象实例</span>
  Local&lt;<span class="function"><span class="keyword">Function</span>&gt; <span class="title">fn</span> = <span class="title">tpl</span>-&gt;<span class="title">GetFunction</span><span class="params">()</span>;
  <span class="title">fn</span>-&gt;<span class="title">SetName</span><span class="params">(String::NewSymbol<span class="params">(<span class="string">"theFunction"</span>)</span>)</span>; // 省略这句，变成匿名函数

  <span class="title">return</span> <span class="title">scope</span>.<span class="title">Close</span><span class="params">(fn)</span>;
}

<span class="title">void</span> <span class="title">Init</span><span class="params">(Handle&lt;Object&gt; exports, Handle&lt;Object&gt; moduel)</span> {</span>
  module-&gt;Set(String::NewSymbol(<span class="string">"exports"</span>),
      FunctionTemplate::<span class="keyword">New</span>(Createobject)-&gt;GetFunction());
}

NODE_MODULE(addon, Init)
</pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>var addon = require(<span class="string">'./build/Release/addon'</span>);

var <span class="function"><span class="keyword">fn</span> = <span class="title">addon</span>(</span>);
console.<span class="keyword">log</span>(<span class="function"><span class="keyword">fn</span>(</span>)); <span class="comment">// 'hello world'</span>
</pre></td></tr></table></figure>

<h3 id="Wrapping_C-2b-2b-_objects">Wrapping C++ objects</h3>
<p>javascript 实现：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="function"><span class="keyword">function</span> <span class="title">MyObject</span><span class="params">(count)</span> {</span>
  <span class="transposed_variable">this.</span>counter_ = count;
}

<span class="transposed_variable">MyObject.</span><span class="transposed_variable">prototype.</span>plusOne = <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
  <span class="transposed_variable">this.</span>counter_ += <span class="number">1</span>;
  <span class="keyword">return</span> <span class="transposed_variable">this.</span>counter_;
};
</pre></td></tr></table></figure>

<p>c++ 实现：</p>
<p><code>addon.cc</code> 文件：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="id">#define</span> <span class="tag">BUILDING_NODE_EXTENSION</span>
<span class="id">#include</span> &lt;<span class="tag">node</span><span class="class">.h</span>&gt;
<span class="id">#include</span> "<span class="tag">myobject</span><span class="class">.h</span>"

<span class="tag">using</span> <span class="tag">namespace</span> <span class="tag">v8</span>;

<span class="tag">void</span> <span class="tag">InitAll</span>(<span class="tag">Handle</span>&lt;<span class="tag">Object</span>&gt; <span class="tag">exports</span>) <span class="rules">{
  <span class="rule"><span class="attribute">MyObject</span>:<span class="value">:<span class="function">Init(exports)</span></span></span>;
<span class="rule">}</span></span>

<span class="tag">NODE_MODULE</span>(<span class="tag">addon</span>, <span class="tag">InitAll</span>)
</pre></td></tr></table></figure>

<p><code>myobject.h</code> 文件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="preprocessor">#ifndef MYOBJECT_H</span>
<span class="preprocessor">#define MYOBJECT_H</span>

<span class="preprocessor">#include &lt;node.h&gt;</span>

<span class="class"><span class="keyword">class</span> <span class="title">MyObject</span> : <span class="title">public</span> <span class="title">node</span>::<span class="title">ObjectWrap</span> {</span>
  <span class="keyword">public</span>:
    <span class="keyword">static</span> <span class="keyword">void</span> Init(v8::Handle&lt;v8::<span class="built_in">Object</span>&gt; exports);

  <span class="keyword">private</span>:
    MyObject();
    ~MyObject();

    <span class="keyword">static</span> v8::Handle&lt;v8::Value&gt; New(<span class="keyword">const</span> v8::Arguments& args);
    <span class="keyword">static</span> v8::Handle&lt;v8::Value&gt; PlusOne(<span class="keyword">const</span> v8::Arguments& args);

    <span class="keyword">double</span> counter_;
};

<span class="preprocessor">#endif</span>
</pre></td></tr></table></figure>

<p><code>myobject.cc</code> 文件：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
</pre></td><td class="code"><pre><span class="comment">#define BUILDING_NODE_EXTENSION</span>
<span class="comment">#include &lt;node.h&gt;</span>
<span class="comment">#include "myobject.h"</span>

using namespace v8;

<span class="attribute">MyObject</span>::MYObject() {}
<span class="attribute">MyObject</span>::~MYObject() {}

<span class="reserved">void</span> <span class="attribute">MyObject</span>::Init(Handle&lt;Object&gt; <span class="built_in">exports</span>) {
  Local&lt;FunctionTemplate&gt; tpl = <span class="attribute">FunctionTemplate</span>::New(New);
  tpl<span class="function">-&gt;</span>SetClassName(<span class="attribute">String</span>::NewSymbol(<span class="string">"MyObject"</span>));
  tpl<span class="function">-&gt;</span>InstanceTemplate<span class="function"><span class="params">()</span>-&gt;</span>SetInternalField(<span class="number">1</span>);

  tpl<span class="function">-&gt;</span>PrototypeTemplate<span class="function"><span class="params">()</span>-&gt;</span>Set(<span class="attribute">String</span>::NewSymbol(<span class="string">"plusOne"</span>),
      <span class="attribute">FunctionTemplate</span>::New<span class="function"><span class="params">(PlusOne)</span>-&gt;</span>GetFunction());

  Persistent&lt;Function&gt; constructor = Persistent&lt;Function&gt;::New(tpl<span class="function">-&gt;</span>GetFunction());
  <span class="built_in">exports</span><span class="function">-&gt;</span>Set(<span class="attribute">String</span>::NewSymbol(<span class="string">"MyObject"</span>), constructor);
}

Handle&lt;Value&gt; <span class="attribute">MyObject</span>::New(<span class="reserved">const</span> Arguments& args) {
  HandleScope scope;

  MyObject* obj = <span class="keyword">new</span> MyObject();
  obj<span class="function">-&gt;</span>counter_ = args[<span class="number">0</span>]<span class="function">-&gt;</span>IsUndefined() ? <span class="number">0</span> : args[<span class="number">0</span>]<span class="function">-&gt;</span>NumberValue();
  obj<span class="function">-&gt;</span>Wrap(args.This());

  <span class="keyword">return</span> args.This();
}

Handle&lt;Value&gt; <span class="attribute">MyObject</span>::PlusOne(<span class="reserved">const</span> Arguments& args) {
  HandleScope scope;

  MyObject* obj = <span class="attribute">ObjectWrap</span>::Unwrap&lt;MyObject&gt;(args.This());
  obj<span class="function">-&gt;</span>counter_ += <span class="number">1</span>;

  <span class="keyword">return</span> scope.Close(<span class="attribute">Number</span>::New(obj<span class="function">-&gt;</span>counter_));
}
</pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="built_in">var</span> addon <span class="subst">=</span> <span class="keyword">require</span>(<span class="string">'./build/Release/addon'</span>);

<span class="built_in">var</span> obj <span class="subst">=</span> <span class="literal">new</span> addon<span class="built_in">.</span>MyObject(<span class="number">10</span>);
console<span class="built_in">.</span><span class="keyword">log</span>(obj<span class="built_in">.</span>plusOne()); <span class="comment">// 11</span>
console<span class="built_in">.</span><span class="keyword">log</span>(obj<span class="built_in">.</span>plusOne()); <span class="comment">// 12</span>
console<span class="built_in">.</span><span class="keyword">log</span>(obj<span class="built_in">.</span>plusOne()); <span class="comment">// 13</span>
</pre></td></tr></table></figure>

]]></content>
    <category scheme="http://blog.jkey.lu/tags/nodejs/" term="nodejs"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[openwrt 把包装到u盘上]]></title>
    <link href="http://blog.jkey.lu/2013/04/22/openwrt-install-package-on-usb-flash-disk/"/>
    <id>http://blog.jkey.lu/2013/04/22/openwrt-install-package-on-usb-flash-disk/</id>
    <published>2013-04-22T12:47:24.000Z</published>
    <updated>2013-04-21T09:15:00.000Z</updated>
    <content type="html"><![CDATA[<p>买了个可以刷 openwrt 的路由器，但是路由器始终是路由器。ROM 大小只有 16M，想装个 python 包到上面显然有些不现实。不过也是有办法把包装到u盘上的，当然前提是路由器上有个 usb 口。</p>
<ul>
<li><p>u盘查到路由器上，然后挂载u盘。</p>
</li>
<li><p>在u盘上创建文件夹，用于安装包</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">mkdir</span> /mnt/sdb1/packages
</pre></td></tr></table></figure>

<ul>
<li>创建 /opt 软连接</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>ln <span class="operator">-s</span> /mnt/sdb1/packages /opt
</pre></td></tr></table></figure>

<a id="more"></a>

<ul>
<li>然后编辑 /etc/opkg.conf 文件，添加一行如下</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">dest</span> usb /opt
</pre></td></tr></table></figure>

<ul>
<li>在 /etc/profile 文件中添加环境变量</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>export <span class="constant">PATH</span>=<span class="variable">$PATH</span><span class="symbol">:/opt/bin</span><span class="symbol">:/opt/sbin</span><span class="symbol">:/opt/usr/bin</span><span class="symbol">:/opt/usr/sbin</span>
export <span class="constant">LD_LIBRARY_PATH</span>=<span class="variable">$LD_LIBRARY_PATH</span><span class="symbol">:/opt/lib</span><span class="symbol">:/opt/usr/lib</span>
</pre></td></tr></table></figure>

<ul>
<li>安装包到u盘上</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="title">opkg</span> update
<span class="title">opkg</span> -dest usb install python
</pre></td></tr></table></figure>

<ul>
<li>如果安装的包中有启动服务的脚本，可以在 /etc/init.d 中添加软连接</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>ln -s /opt/etc/init<span class="preprocessor">.d</span>/nginx /etc/init<span class="preprocessor">.d</span>/nginx
</pre></td></tr></table></figure>

<p>更多详细：<a href="http://wiki.openwrt.org/doc/techref/opkg#mount.point" target="_blank"><a href="http://wiki.openwrt.org/doc/techref/opkg#mount.point">http://wiki.openwrt.org/doc/techref/opkg#mount.point</a></a></p>
]]></content>
    <category scheme="http://blog.jkey.lu/tags/openwrt/" term="openwrt"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[pep 8]]></title>
    <link href="http://blog.jkey.lu/2013/04/21/pep-8/"/>
    <id>http://blog.jkey.lu/2013/04/21/pep-8/</id>
    <published>2013-04-21T07:32:09.000Z</published>
    <updated>2013-04-21T08:17:08.000Z</updated>
    <content type="html"><![CDATA[<h1 id="-7b80-4ecb-">简介</h1>
<p>这篇是讲关于 python 代码风格的一些约定，主要用于 python 中标准库的代码风格的约定。关于 <a href="http://www.python.org/dev/peps/pep-0008/" target="_blank">pep 8</a> 这份文档网上也有很多翻译，但是为了自己便于记忆，大致的翻译记录一下。所以，对照原文可能是不完整的。</p>
<h1 id="A_Foolish_Consistency_is_the_Hobgoblin_of_Little_Minds">A Foolish Consistency is the Hobgoblin of Little Minds</h1>
<p>总之一句话，就是保持代码的一致性。</p>
<h1 id="-4ee3-7801-6392-7248-">代码排版</h1>
<h2 id="-7f29-8fdb-">缩进</h2>
<ul>
<li><p>每级缩进使用 4 个空格。</p>
</li>
<li><p>如果和旧代码不一致，还是改为与旧代码相同的缩减方式。</p>
</li>
</ul>
<a id="more"></a>

<p>Yes:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="comment"># Aligned with opening delimiter</span>
foo = long_function_name(var_one, var_two,
                         var_three, var_four)

<span class="comment"># More indentation included to distinguish this from the rest.</span>
<span class="function"><span class="keyword">def</span> <span class="title">long_function_name</span><span class="params">(
        var_one, var_two, var_three,
        var_four)</span>:</span>
    print(var_one)
</pre></td></tr></table></figure>

<p>No:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="comment"># Arguments on first line forbidden when not using vertical alignment</span>
foo = long_function_name(var_one, var_two,
    var_three, var_four)

<span class="comment"># Further indentation required as indentation is not distinguishable</span>
<span class="function"><span class="keyword">def</span> <span class="title">long_function_name</span><span class="params">(
    var_one, var_two, var_three,
    var_four)</span>:</span>
    print(var_one)
</pre></td></tr></table></figure>

<p>Optional:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="preprocessor"># Extra indentation is not necessary.</span>
<span class="title">foo</span> = long_function_name(
  var_one, var_two,
  var_three, var_four)
</pre></td></tr></table></figure>

<h2 id="-5236-8868-7b26-8fd8-662f-7a7a-683c-ff1f-">制表符还是空格？</h2>
<ul>
<li><p>永远不要混着一起用。</p>
</li>
<li><p>建议使用空格。在调用 python 命令行解释器时可以使用 -t 或 -tt 选项来检查代码中是否混用制表符和空格，前者发出警告，后者发出错误。</p>
</li>
</ul>
<h2 id="-6bcf-884c-6700-5927-957f-5ea6-">每行最大长度</h2>
<ul>
<li><p>限制所有行最大字符数不超过 79 个字符。</p>
</li>
<li><p>文档或注释的话推荐将长度限制在 72 个字符。</p>
</li>
<li><p>可以使用圆括号、方括号和大括号来指示连续的行。可以用圆括号把原来一句很长的表达式分割为多行。</p>
</li>
</ul>
<p>Some examples:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span>(<span class="title">Blob</span>):

    <span class="title">def</span> <span class="title">__init__</span>(<span class="title">self</span>, <span class="title">width</span>, <span class="title">height</span>,
                 <span class="title">color</span>='<span class="title">black</span>', <span class="title">emphasis</span>=<span class="title">None</span>, <span class="title">highlight</span>=0):
        <span class="title">if</span> (<span class="title">width</span> == 0 <span class="title">and</span> <span class="title">height</span> == 0 <span class="title">and</span>
            <span class="title">color</span> == '<span class="title">red</span>' <span class="title">and</span> <span class="title">emphasis</span> == '<span class="title">strong</span>' <span class="title">or</span>
            <span class="title">highlight</span> &gt; 100):
            <span class="title">raise</span> <span class="title">ValueError</span>("<span class="title">sorry</span>, <span class="title">you</span> <span class="title">lose</span>")
        <span class="title">if</span> <span class="title">width</span> == 0 <span class="title">and</span> <span class="title">height</span> == 0 <span class="title">and</span> (<span class="title">color</span> == '<span class="title">red</span>' <span class="title">or</span>
                                           <span class="title">emphasis</span> <span class="title">is</span> <span class="title">None</span>):
            <span class="title">raise</span> <span class="title">ValueError</span>("<span class="title">I</span> <span class="title">don</span>'<span class="title">t</span> <span class="title">think</span> <span class="title">so</span> -- <span class="title">values</span> <span class="title">are</span> %<span class="title">s</span>, %<span class="title">s</span>" %
                             (<span class="title">width</span>, <span class="title">height</span>))
        <span class="title">Blob</span>.<span class="title">__init__</span>(<span class="title">self</span>, <span class="title">width</span>, <span class="title">height</span>,
                      <span class="title">color</span>, <span class="title">emphasis</span>, <span class="title">highlight</span>)</span>
</pre></td></tr></table></figure>

<h2 id="-7a7a-884c-">空行</h2>
<ul>
<li><p>顶级函数和类定义用两行空行分割。</p>
</li>
<li><p>类中的方法定义用一行空行分割。</p>
</li>
<li><p>可以用额外的空行分割一组相关的函数。</p>
</li>
</ul>
<h2 id="-7f16-7801-_-28-3c-a_href-3d-22-http-3a-2f-2f-www-python-org-2f-dev-2f-peps-2f-pep-0263-22-3e-PEP_263-3c-2f-a-3e-29-">编码 (<a href="http://www.python.org/dev/peps/pep-0263" target="_blank">PEP 263</a>)</h2>
<p>python 核心代码应该使用 ASCII 或 Latin-1 编码。python 3.0 以上使用 UTF-8，更多请看 <a href="http://www.python.org/dev/peps/pep-3120" target="_blank">PEP 3120</a></p>
<h2 id="-5bfc-5165-">导入</h2>
<ul>
<li>通常在单独的行导入</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>    <span class="type">Yes</span>: <span class="import"><span class="keyword">import</span> os</span>
         <span class="import"><span class="keyword">import</span> sys</span>

    <span class="type">No</span>:  <span class="import"><span class="keyword">import</span> sys, os</span>
</pre></td></tr></table></figure>

<ul>
<li>以下请看是没问题的：</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>    from subprocess <span class="import"><span class="keyword">import</span> Popen, PIPE</span>
</pre></td></tr></table></figure>

<ul>
<li><p>导入通常被放在文件的顶部，在模块注释和文档字符串之后，在模块的全局变量和常量之前。</p>
<p>  导入应该按照下面顺序分组排放：</p>
<pre><code>  1. 标准库的导入
  2. 相关的第三方包的导入
  3. 本地应用/库的特定导入
</code></pre><p>  并且用一行空行分隔每个分组。</p>
<p>  把任何相关 __all__ 说明的放在导入之后。</p>
</li>
<li><p>对于所有导入都是用据对路径。</p>
</li>
<li><p>从一个包含类的模块中导入类时，通常可以写成这样：</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>    from my<span class="class"><span class="keyword">class</span> <span class="title">import</span> <span class="title">MyClass</span></span>
    from foo.bar.your<span class="class"><span class="keyword">class</span> <span class="title">import</span> <span class="title">YourClass</span></span>
</pre></td></tr></table></figure>

<pre><code>如果这样写导致了本地名字冲突，那么就这样写：
</code></pre><figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>    <span class="import"><span class="keyword">import</span> myclass</span>
    <span class="import"><span class="keyword">import</span> foo.bar.yourclass</span>
</pre></td></tr></table></figure>

<pre><code>并且使用 &quot;myclass.MyClass&quot; 和 &quot;foo.bar.yourclass.YourClass&quot;.
</code></pre><h1 id="-8868-8fbe-5f0f-548c-8bed-53e5-4e2d-7684-7a7a-683c-">表达式和语句中的空格</h1>
<h2 id="-4e0d-80fd-5fcd-53d7-7684-4e8b-">不能忍受的事</h2>
<p><strong>避免</strong>在下述情况中使用无关的空格：</p>
<ul>
<li>紧挨着圆括号，方括号或大括号里空格</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>    <span class="tag">Yes</span>: <span class="tag">spam</span>(<span class="tag">ham</span><span class="attr_selector">[1]</span>, <span class="rules">{<span class="rule"><span class="attribute">eggs</span>:<span class="value"> <span class="number">2</span></span></span></span>})
    <span class="tag">No</span>:  <span class="tag">spam</span>( <span class="tag">ham</span><span class="attr_selector">[ 1 ]</span>, <span class="rules">{ <span class="rule"><span class="attribute">eggs</span>:<span class="value"> <span class="number">2</span> </span></span></span>} )
</pre></td></tr></table></figure>

<ul>
<li>在逗号，分号或冒号前有空格</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>    <span class="attribute">Yes</span>: <span class="keyword">if</span> x == <span class="number">4</span>: <span class="built_in">print</span> x, y; x, y = y, x
    <span class="attribute">No</span>:  <span class="keyword">if</span> x == <span class="number">4</span> : <span class="built_in">print</span> x , y ; x , y = y , x
</pre></td></tr></table></figure>

<ul>
<li>在函数调用的左括号前有空格</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>    <span class="attribute">Yes</span>: <span class="string">spam(1)</span>
    <span class="attribute">No</span>: <span class="string"> spam (1)</span>
</pre></td></tr></table></figure>

<ul>
<li>在索引的多括号前有空格</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>    Yes: dict<span class="matrix">[<span class="string">'key'</span>]</span> = <span class="built_in">list</span><span class="matrix">[index]</span>
    No:  dict <span class="matrix">[<span class="string">'key'</span>]</span> = <span class="built_in">list</span> <span class="matrix">[index]</span>
</pre></td></tr></table></figure>

<ul>
<li><p>在等号前加多余的空格</p>
<p>  Yes:</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>    <span class="title">x</span> = <span class="number">1</span>
    y = <span class="number">2</span>
    long_variable = <span class="number">3</span>
</pre></td></tr></table></figure>

<pre><code><span class="label">No:</span>
</code></pre><figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>    <span class="title">x</span>             = <span class="number">1</span>
    y             = <span class="number">2</span>
    long_variable = <span class="number">3</span>
</pre></td></tr></table></figure>

<h2 id="-5176-4ed6-63a8-8350-">其他推荐</h2>
<h1 id="-6ce8-91ca-">注释</h1>
<h2 id="Block_Comments">Block Comments</h2>
<h2 id="Inline_Comments">Inline Comments</h2>
<h2 id="Documentation_Strings">Documentation Strings</h2>
<h1 id="Version_Bookkeeping">Version Bookkeeping</h1>
<h1 id="Naming_Conventions">Naming Conventions</h1>
<h2 id="Descriptive-3a-_Naming_Styles">Descriptive: Naming Styles</h2>
<h2 id="Prescriptive-3a-_Naming_Conventions">Prescriptive: Naming Conventions</h2>
<h3 id="Names_to_Avoid">Names to Avoid</h3>
<h3 id="Package_and_Module_Names">Package and Module Names</h3>
<h3 id="Class_Names">Class Names</h3>
<h3 id="Exception_Names">Exception Names</h3>
<h3 id="Global_Variable_Names">Global Variable Names</h3>
<h3 id="Function_Names">Function Names</h3>
<h3 id="Function_and_method_arguments">Function and method arguments</h3>
<h3 id="Method_Names_and_Instance_Variables">Method Names and Instance Variables</h3>
<h3 id="Constants">Constants</h3>
<h3 id="Designing_for_inheritance">Designing for inheritance</h3>
<h1 id="Programming_Recommendations">Programming Recommendations</h1>
]]></content>
    <category scheme="http://blog.jkey.lu/tags/python/" term="python"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[重新配置我的树莓派]]></title>
    <link href="http://blog.jkey.lu/2013/04/18/configure-raspberry-pi/"/>
    <id>http://blog.jkey.lu/2013/04/18/configure-raspberry-pi/</id>
    <published>2013-04-18T13:42:06.000Z</published>
    <updated>2013-04-21T07:27:00.000Z</updated>
    <content type="html"><![CDATA[<h2 id="-5b89-88c5-7cfb-7edf-">安装系统</h2>
<p>下载 Arch Linux ARM 系统镜像：<a href="http://www.raspberrypi.org/downloads" target="_blank"><a href="http://www.raspberrypi.org/downloads">http://www.raspberrypi.org/downloads</a></a></p>
<p>解压出 .img 文件，然后使用以下命令把镜像写入 SD 卡中</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="comment">dd</span> <span class="comment">if=archlinux</span><span class="literal">-</span><span class="comment">hf</span><span class="literal">-</span><span class="comment">2013</span><span class="literal">-</span><span class="comment">02</span><span class="literal">-</span><span class="comment">11</span><span class="string">.</span><span class="comment">img</span> <span class="comment">of=/dev/sdb</span> <span class="comment">bs=1M</span>
</pre></td></tr></table></figure>

<p>如果是 window 系统，可以下载 <a href="http://sourceforge.net/projects/win32diskimager/" target="_blank">Win32DiskImager</a> 来把镜像写入 SD 卡。</p>
<a id="more"></a>

<h2 id="-8bbe-7f6e-5185-5b58-">设置内存</h2>
<p>由于主要把我的树莓派当作服务器用，所以没必要分配太多的 VIDEO RAM，可以设置/boot/config.txt：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>gpu_mem=<span class="number">16</span>
<span class="preprocessor">#gpu_mem_512=316</span>
<span class="preprocessor">#gpu_mem_256=128</span>
<span class="preprocessor">#cma_lwm=16</span>
<span class="preprocessor">#cma_hwm=32</span>
<span class="preprocessor">#cma_offline_start=16</span>
</pre></td></tr></table></figure>

<p>更多关于 config.txt 文件的配置信息查看 <a href="http://elinux.org/RPiconfig" target="_blank"><a href="http://elinux.org/RPiconfig">http://elinux.org/RPiconfig</a></a></p>
<h2 id="-8c03-6574-5206-533a-5927-5c0f-">调整分区大小</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>echo -e "d<span class="command">\n</span>2<span class="command">\nn</span><span class="command">\np</span><span class="command">\n</span><span class="command">\n</span><span class="command">\n</span><span class="command">\nw</span><span class="command">\n</span>" | fdisk /dev/mmcblk0
reboot
</pre></td></tr></table></figure>

<p>重启后</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">resize2fs</span> /dev/mmcblk0p2
</pre></td></tr></table></figure>

<p>更多关于<a href="http://elinux.org/RPi_Resize_Flash_Partitions#Manually_resizing_the_SD_card_on_Raspberry_Pi" target="_blank">调整分区大小</a></p>
<h2 id="-7cfb-7edf-8bbe-7f6e-">系统设置</h2>
<ul>
<li>设置时区</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>timedatectl <span class="built_in">set</span><span class="attribute">-timezone</span> Asia<span class="subst">/</span>Shanghai
</pre></td></tr></table></figure>

<p>更多关于<a href="https://wiki.archlinux.org/index.php/Time#Time_Zone" target="_blank">时区设置</a></p>
<ul>
<li>设置 Hostname</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>hostnamectl <span class="built_in">set</span><span class="attribute">-hostname</span> rpi
</pre></td></tr></table></figure>

<p>更多关于 <a href="https://wiki.archlinux.org/index.php/Network_Configuration#Set_the_hostname" target="_blank">Hostname</a></p>
<ul>
<li>更新系统</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="comment">pacman</span> <span class="literal">-</span><span class="comment">Syu</span>
</pre></td></tr></table></figure>

<ul>
<li>安装 Sudo</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>pacman -S <span class="built_in">sudo</span>
</pre></td></tr></table></figure>

<p>配置 sudo，执行 <code>visudo</code>，去掉下面这句注释</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="tag">%<span class="title">wheel</span></span> ALL=(ALL) ALL
</pre></td></tr></table></figure>

<p>更多关于 <a href="https://wiki.archlinux.org/index.php/Sudo" target="_blank">Sudo</a></p>
<ul>
<li>添加用户</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="comment">useradd</span> <span class="literal">-</span><span class="comment">m</span> <span class="literal">-</span><span class="comment">U</span> <span class="literal">-</span><span class="comment">G</span> <span class="comment">wheel</span> <span class="literal">-</span><span class="comment">s</span> <span class="comment">/bin/bash</span> <span class="comment">jkey</span>
<span class="comment">passwd</span> <span class="comment">jkey</span>
</pre></td></tr></table></figure>

<p>更多关于<a href="https://wiki.archlinux.org/index.php/Users_and_Groups#User_groups" target="_blank">用户和组</a></p>
<ul>
<li>配置 SSH</li>
</ul>
<p>修改 /etc/ssh/sshd_config 文件，修改默认端口，禁止 root 登录，禁止使用密码登录</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="title">Port</span> <span class="number">8888</span>
PermitRootLogin <span class="built_in">no</span>
PasswordAuthentication <span class="built_in">no</span>
</pre></td></tr></table></figure>

<p>锁住 root 用户</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>passwd <span class="operator">-l</span> root
</pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[制作一个 python egg]]></title>
    <link href="http://blog.jkey.lu/2013/04/11/create-python-egg/"/>
    <id>http://blog.jkey.lu/2013/04/11/create-python-egg/</id>
    <published>2013-04-11T14:06:51.000Z</published>
    <updated>2013-04-14T14:19:22.000Z</updated>
    <content type="html"><![CDATA[<p>最近用 Python 写了一个公共的库，然后我想让它能够像平常使用 pip 安装第三方库一样方便的安装。然后就去研究了一下 python 是如何打包的，更确切的说是适合用于 pip 安装的打包方式。</p>
<p>首先创建一个项目文件夹，这个项目文件夹的结构如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>helloworld/
    helloworld/
        __init__<span class="preprocessor">.py</span>
        foo<span class="preprocessor">.py</span>
    setup<span class="preprocessor">.py</span>
    README<span class="preprocessor">.md</span>
</pre></td></tr></table></figure>

<a id="more"></a>

<p>在 foo.py 中顶一个简单的函数</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">sayHello</span><span class="params">()</span>:</span>
    <span class="keyword">print</span> <span class="string">'Hello World!'</span>
</pre></td></tr></table></figure>

<p>然后就是 setup.py 文件，他是创建 egg 的配置文件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre>import distutils.core

version = <span class="comment">'0.1'</span>

distutils.core.setup(
    name=<span class="comment">'helloworld',</span>
    version=version,
    packages=[<span class="comment">'helloworld'],</span>
    author=<span class="comment">'jKey Lu',</span>
    author_email=<span class="comment">'i@jkey.lu',</span>
    url=<span class="comment">'https://blog.jkey.lu/2013/04/11/create-python-egg/',</span>
    license=<span class="comment">'http://opensource.org/licenses/mit-license.php',</span>
    description=<span class="comment">'Create Python Egg'</span>
    )
</pre></td></tr></table></figure>

<p>更多关于 distutils.core.setup 中的参数可以看这里：<a href="http://docs.python.org/2/distutils/setupscript.html#additional-meta-data" target="_blank">Additional meta-data</a></p>
<p>接下来就是我们最终想要的，就是打包了，其实这是最简单的一条命令</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">python</span> setup.py sdist
</pre></td></tr></table></figure>

<p>上面命令回车后，看看我们的项目文件夹有何变化</p>
<ol>
<li>多了一个 dist/ 文件夹，里面 helloworld-0.1.zip 就是我们生成的包</li>
<li>多了个 MANIFEST 文件，这是打包这个命令自动生成的。你会发现文件里列出的文件名称和打包进 helloworld-0.1.zip 中的文件是一样的</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>helloworld/
    helloworld/
        __inti__<span class="preprocessor">.py</span>
        foo<span class="preprocessor">.py</span>
    dist/
        helloworld-<span class="number">0.1</span><span class="preprocessor">.zip</span>
    MANIFEST
    setup<span class="preprocessor">.py</span>
    README<span class="preprocessor">.md</span>
</pre></td></tr></table></figure>

<p>接下来我们用 pip 安装刚刚打包完成的包</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="comment">pip</span> <span class="comment">install</span> <span class="comment">dist/helloworld</span><span class="literal">-</span><span class="comment">0</span><span class="string">.</span><span class="comment">1</span><span class="string">.</span><span class="comment">zip</span>
</pre></td></tr></table></figure>

<p>在 IDEL 中验证一下刚安装的包是否成功，很显然是成功了</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="title">from</span> helloworld.foo <span class="import"><span class="keyword">import</span> sayHello</span>
<span class="title">sayHello</span>() # <span class="type">Hello</span> <span class="type">World</span>!
</pre></td></tr></table></figure>

<p>写到这里差不多该结束，等等，发现 helloworld-0.1.zip 中没有 README.md 文件，想打包的时候一起包含进去咋办？</p>
<p>在项目文件夹中添加 MANIFEST.in 文件，是不是和打包命令自动生成的 MANIFEST 文件有点像，多了个文件扩展名，其实 MANIFEST.in 是 MANIFEST 的模板。关于这个文件的详细信息可以看着里 <a href="http://docs.python.org/2/distutils/sourcedist.html#the-manifest-in-template" target="_blank">The MANIFEST.in template</a></p>
<p>下面是 MANIFEST.in 中的内容</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="keyword">include</span> <span class="constant">README</span>.md
</pre></td></tr></table></figure>

<p>重新打包一下，helloworld-0.1.zip 中就包含 README.md 文件了。</p>
<p>可能你会注意到我打包后生成的文件是 zip 压缩包，这是因为我在 windows 上大的包，如果在 linux 上打包，默认生成的是 tar.gz 的压缩包。问题：如果想在 windows 上也生成 tar.gz 的包该如何？</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="comment">python</span> <span class="comment">setup</span><span class="string">.</span><span class="comment">py</span> <span class="comment">sdist</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">formats=gztar</span>
</pre></td></tr></table></figure>

<p>更多关于生成的格式看这里 <a href="http://docs.python.org/2/distutils/sourcedist.html#creating-a-source-distribution" target="_blank">Create a Source Distribution</a></p>
]]></content>
    <category scheme="http://blog.jkey.lu/tags/python/" term="python"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[tornado util 模块中的 Configurable 类]]></title>
    <link href="http://blog.jkey.lu/2013/03/31/tornado-configurable-interface/"/>
    <id>http://blog.jkey.lu/2013/03/31/tornado-configurable-interface/</id>
    <published>2013-03-31T01:34:47.000Z</published>
    <updated>2013-03-31T04:38:31.000Z</updated>
    <content type="html"><![CDATA[<p>简单的说 Configurable 就是让继承自它的子类的构造函数具有工厂函数一样的行为。意思是，只要一个类继承自 Configurable, 那么在这个类在实例化时，构造函数就像工厂一样来选择一个这个类的子类来实例化。</p>
<p>通常如果要继承 Configurable 接口，那么首先要实现 <code>configurable_base(cls)</code> 和 <code>configurable_default(cls)</code> 这两个静态方法。</p>
<p>在 tornado 中有三个类是继承自 Configurable 的，分别是 AsyncHttpClient, IOLoop 和 Resolver。</p>
<a id="more"></a>

<p>下面是 Configurable 类的主要代码：</p>
<figure class="highlight lang-python"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
</pre></td><td class="code"><pre><span class="class"><span class="keyword">class</span> <span class="title">Configurable</span><span class="params">(object)</span>:</span>
    __impl_class = <span class="keyword">None</span>
    __impl_kwargs = <span class="keyword">None</span>

    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, **kwargs)</span>:</span>
        base = cls.configurable_base()
        args = {}
        <span class="keyword">if</span> cls <span class="keyword">is</span> base:
            impl = cls.configured_class()
            <span class="keyword">if</span> base.__impl_kwargs:
                args.update(base.__impl_kwargs)
        <span class="keyword">else</span>:
            impl = cls
        args.update(kwargs)
        instance = super(Configurable, cls).__new__(impl)

        <span class="comment"># initialize vs __init__ 的选择是为了兼容 AsyncHTTPClient 单例模式的 magic。</span>
        <span class="comment"># 如果能摆脱它，那么这里我们也能切换到 __init__</span>
        instance.initialize(**args)
        <span class="keyword">return</span> instance

    <span class="decorator">@classmethod</span>
    <span class="function"><span class="keyword">def</span> <span class="title">configurable_base</span><span class="params">(cls)</span>:</span>
        <span class="string">"""返回继承于 Configurable 的基类

        一般这里直接返回这个类（但是不必须是和 cls 相同的类）
        """</span>
        <span class="keyword">raise</span> NotImplementedError()

    <span class="decorator">@classmethod</span>
    <span class="function"><span class="keyword">def</span> <span class="title">configurable_default</span><span class="params">(cls)</span>:</span>
        <span class="string">"""返回真正实现的类

        其实真正的工厂是在这里实现的
        """</span>
        <span class="keyword">raise</span> NotImplementedError()

    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(self)</span>:</span>
        <span class="string">"""初始化一个 `Configurable` 子类的实例。

        Configurable 类应该用 `initialize` 来代替 ``__init__``
        """</span>

    <span class="decorator">@classmethod</span>
    <span class="function"><span class="keyword">def</span> <span class="title">configured_class</span><span class="params">(cls)</span>:</span>
        <span class="string">"""返回当前配置完成的类。"""</span>
        base = cls.configurable_base()
        <span class="keyword">if</span> cls.__impl_class <span class="keyword">is</span> <span class="keyword">None</span>:
            base.__impl_class = cls.configurable_default()
        <span class="keyword">return</span> base.__impl_class
</pre></td></tr></table></figure>

<p>这才明白为什么 tornado 应用在 main 最后调用 <code>tornado.ioloop.IOLoop.instance().start()</code> 就可以了选择和平台相关的 IOLoop 实现了。</p>
<p>下面就是 IOLoop 中的 <code>configurable_default(cls)</code> 定义</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="class"><span class="keyword">class</span> <span class="title">IOLoop</span>(<span class="title">Configurable</span>):

    @<span class="title">classmethod</span>
    <span class="title">def</span> <span class="title">configurable_default</span>(<span class="title">cls</span>):
        <span class="title">if</span> <span class="title">hasattr</span>(<span class="title">select</span>, "<span class="title">epoll</span>"):
            <span class="title">from</span> <span class="title">tornado</span>.<span class="title">platform</span>.<span class="title">epoll</span> <span class="title">import</span> <span class="title">EPollIOLoop</span>
            <span class="title">return</span> <span class="title">EPollIOLoop</span>
        <span class="title">if</span> <span class="title">hasattr</span>(<span class="title">select</span>, "<span class="title">kqueue</span>"):
            # <span class="title">Python</span> 2.6+ <span class="title">on</span> <span class="title">BSD</span> <span class="title">or</span> <span class="title">Mac</span>
            <span class="title">from</span> <span class="title">tornado</span>.<span class="title">platform</span>.<span class="title">kqueue</span> <span class="title">import</span> <span class="title">KQueueIOLoop</span>
            <span class="title">return</span> <span class="title">KQueueIOLoop</span>
        <span class="title">from</span> <span class="title">tornado</span>.<span class="title">platform</span>.<span class="title">select</span> <span class="title">import</span> <span class="title">SelectIOLoop</span>
        <span class="title">return</span> <span class="title">SelectIOLoop</span></span>
</pre></td></tr></table></figure>

]]></content>
    <category scheme="http://blog.jkey.lu/tags/tornado/" term="tornado"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Linux 上 C 语言的 socket 编程]]></title>
    <link href="http://blog.jkey.lu/2013/03/22/linux-c-socket/"/>
    <id>http://blog.jkey.lu/2013/03/22/linux-c-socket/</id>
    <published>2013-03-22T15:42:19.000Z</published>
    <updated>2013-03-30T07:15:54.000Z</updated>
    <content type="html"><![CDATA[<p>这几天看了一下 Linux 上的 socket 编程，把主要几个 socket 编程用到的函数研究了一下，并记录下来备忘。</p>
<h2 id="socket-28-29-">socket()</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>#<span class="keyword">include</span> &lt;sys/socket.h&gt;
<span class="built_in">int</span> socket(<span class="built_in">int</span> domain, <span class="built_in">int</span> <span class="class"><span class="keyword">type</span>, <span class="title">int</span> <span class="title">protocol</span>);</span>
</pre></td></tr></table></figure>

<ul>
<li><p><strong>domain</strong> 指定 socket 的通信协议集(AF_UNIX 和 AF_INET 等)</p>
<p>  AF_UNIX (与 AF_LOCAL 和 AF_FILE 相同) 只能够用于单一的 *nix 的系统上，使用 AF_UNIX 会在系统上创建一个 socket 文件，不同进程通过读写这个文件来实现通信。</p>
<p>  AF_INET 则是用于网络的，所以可以允许远程主机之间的通信。</p>
<p>  更多协议可以看 <bits/socket.h></p>
</li>
<li><p><strong>type</strong> 指定 socket 的类型(SOCK_STREAM 和 SOCK_DGRAM 等)</p>
<p>  SOCK_STREAM 表明使用 TCP 协议，这就意味着会提供按顺序的、可靠、双向、面向连接的比特流。</p>
<p>  SOCK_DGRAM 表明使用 UDP 协议，这就意味着会提供定长的、不可靠、无连接的通信。</p>
</li>
<li><p><strong>protocol</strong> 指定实际使用的传输协议。最常见的就是 IPPROTO_TCP, IPPROTO_SCTP, IPPROTO_UDP, IPPROTO_DCCP。这些协议都在 <netinet/in.h> 中有详细说明。如果该项为 0 的话，即根据选定的domain和type选择使用缺省协议。</p>
</li>
</ul>
<p>调用 socket() 函数后，成功会返回文件描述符，失败则返回 -1。</p>
<a id="more"></a>

<h2 id="bind-28-29-">bind()</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="preprocessor">#include &lt;sys/socket.h&gt;</span>
<span class="keyword">int</span> bind(<span class="keyword">int</span> socket, <span class="keyword">const</span> <span class="keyword">struct</span> sockaddr *address,
        socklen_t address_len);
</pre></td></tr></table></figure>

<p>bind() 为 socket 分配地址。当使用 socket() 创建套接字后，仅仅赋予了其所使用的协议，而没有分配地址。在接受其它主机连接前，必须先调用 bind() 为 socket 分配地址。</p>
<ul>
<li><p><strong>socket</strong> 这是 socket 的描述符</p>
</li>
<li><p><strong>address</strong> 指向 sockaddr 结构（用于表示所分配地址）的指针</p>
</li>
<li><p><strong>address_len</strong> sockaddr 结构的长度</p>
</li>
</ul>
<h2 id="listen-28-29-">listen()</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="comment">#include &lt;sys/socket.h&gt;</span>
<span class="keyword">int</span> <span class="keyword">listen</span>(<span class="keyword">int</span> <span class="keyword">socket</span>, <span class="keyword">int</span> backlog);
</pre></td></tr></table></figure>

<p>当 socket 和一个地址绑定后，调用 listen() 函数开始监听连接请求。但是，这只能在有可靠数据流保证时使用，如 SOCK_STREAM, SOCK_SEQPACKET 。</p>
<ul>
<li><p><strong>socket</strong> socket 的描述符</p>
</li>
<li><p><strong>backlog</strong> 一个决定监听队列大小的整数，当有一个连接请求到来，就会进入此监听队列，当队列满后，新的连接请求会返回错误。</p>
</li>
</ul>
<p>如果成功监听返回 0，否则返回 -1 。</p>
<h2 id="accept-28-29-">accept()</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="comment">#include &lt;sys/socket.h&gt;</span>
<span class="keyword">int</span> <span class="keyword">accept</span>(<span class="keyword">int</span> <span class="keyword">socket</span>, struct sockaddr <span class="variable">*restrict</span> address,
        socklen_t <span class="variable">*restrict</span> address_len);
</pre></td></tr></table></figure>

<p>当应用程序监听来自其他主机的面对数据流的连接时，通过事件（比如Unix select()系统调用）通知它。必须用 accept()函数初始化连接。 Accept() 为每个连接创立新的套接字并从监听队列中移除这个连接。它使用如下参数：</p>
<ul>
<li><p><strong>socket</strong> 监听的 socket 描述符</p>
</li>
<li><p><strong>address</strong> 指向sockaddr 结构体的指针，客户机地址信息。</p>
</li>
<li><p><strong>address_len</strong> 指向 socklen_t的指针，确定客户机地址结构体的大小 。</p>
</li>
</ul>
<p>返回新的套接字描述符，出错返回-1。进一步的通信必须通过这个套接字。</p>
<p>Datagram 套接字不要求用accept()处理，因为接收方可能用监听套接字立即处理这个请求。</p>
<h2 id="connect-28-29-">connect()</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="preprocessor">#include &lt;sys/socket.h&gt;</span>
<span class="keyword">int</span> connect(<span class="keyword">int</span> socket, <span class="keyword">const</span> <span class="keyword">struct</span> sockaddr *address,
        socklen_t address_len);
</pre></td></tr></table></figure>

<p>connect() 系统调用为一个套接字设置连接，参数有文件描述符和主机地址。</p>
<p>某些类型的套接字是无连接的，大多数是 UDP 协议。对于这些套接字，连接时这样的：默认发送和接收数据的主机由给定的地址确定，可以使用 send() 和 recv()。返回 -1 表示出错，0 表示成功。</p>
<h2 id="socket_-5b9e-4f8b-">socket 实例</h2>
<p><em>client.c 文件</em></p>
<script src="https://gist.github.com/jkeylu/5275687.js?file=client.c"></script>


<p><em>server.c 文件</em></p>
<script src="https://gist.github.com/jkeylu/5275687.js?file=server.c"></script>

]]></content>
    <category scheme="http://blog.jkey.lu/tags/socket/" term="socket"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[python 装饰器和 functools 模块]]></title>
    <link href="http://blog.jkey.lu/2013/03/15/python-decorator-and-functools-module/"/>
    <id>http://blog.jkey.lu/2013/03/15/python-decorator-and-functools-module/</id>
    <published>2013-03-15T15:11:49.000Z</published>
    <updated>2013-03-21T13:44:37.000Z</updated>
    <content type="html"><![CDATA[<h2 id="-4ec0-4e48-662f-88c5-9970-5668-ff1f-">什么是装饰器？</h2>
<p>在 python 语言里第一次看到装饰器不免让人想到设计模式中的装饰模式——动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活。</p>
<p>好吧，python 中的装饰器显然和装饰模式毫无关系。那 python 中的装饰器到底是什么呢？</p>
<p>简而言之，装饰器提供了一种方法，在函数和类定义语句的末尾插入自动运行代码。python 中有两种装饰器：函数装饰器和类装饰器。</p>
<h2 id="-51fd-6570-88c5-9970-5668-">函数装饰器</h2>
<h3 id="-7b80-5355-7684-88c5-9970-5668-4f8b-5b50-ff1a-">简单的装饰器例子：</h3>
<figure class="highlight lang-python"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(F)</span>:</span> <span class="comment"># 装饰器函数定义</span>
    <span class="keyword">print</span> <span class="string">"I'm decorator"</span>
    <span class="keyword">return</span> F

<span class="decorator">@decorator</span>
<span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span>
    <span class="keyword">print</span> <span class="string">'Hello World!'</span>
<span class="comment"># 上面等价于 foo = decorator(foo)</span>

foo()
<span class="string">"""
I'm decorator
Hello World!
"""</span>

decorator(foo)() <span class="comment"># 所以这里的输出与 foo() 相同</span>
<span class="string">"""
I'm decorator
Hello World!
"""</span>
</pre></td></tr></table></figure>

<p>从上面运行后结果看出，装饰器就是一个能够返回可调用对象（函数）的可调用对象（函数）。</p>
<a id="more"></a>

<h3 id="-5177-6709-5c01-95ed-4f5c-7528-57df-7684-88c5-9970-5668-">具有封闭作用域的装饰器</h3>
<figure class="highlight lang-python"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span> <span class="comment"># 装饰器函数</span>
    <span class="keyword">print</span> <span class="string">'in decorator'</span>
    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args)</span>:</span>
        <span class="keyword">print</span> <span class="string">'in decorator wrapper'</span>
        wrapper._calls += <span class="number">1</span>
        <span class="keyword">print</span> <span class="string">"calls = %d"</span> % (wrapper._calls)
        func(*args)
    wrapper._calls = <span class="number">0</span>
    <span class="keyword">return</span> wrapper

<span class="decorator">@decorator</span>
<span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y)</span>:</span>
    <span class="keyword">print</span> <span class="string">"x = %d, y = %d"</span> % (x, y)

foo(<span class="number">1</span>, <span class="number">2</span>) <span class="comment"># 第一次调用</span>
<span class="string">"""
in decorator
in decorator wrapper
calls = 1
x = 1, y = 2
"""</span>

foo(<span class="number">2</span>, <span class="number">3</span>) <span class="comment"># 第二次调用</span>
<span class="string">"""
in decorator wrapper
calls = 2
x = 2, y = 3
"""</span>
</pre></td></tr></table></figure>

<p>可以看出第一次调用 <code>foo(1, 2)</code> 时，相当于</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>foo = decorator(foo)
<span class="function"><span class="title">foo</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>
</pre></td></tr></table></figure>

<p>第二次调用 <code>foo(2, 3)</code> 时 <em>foo</em> 已经为 <em>decorator(foo)</em> 的返回值了</p>
<p>再看看一个装饰器类来实现的：</p>
<figure class="highlight lang-python"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="code"><pre><span class="class"><span class="keyword">class</span> <span class="title">decorator</span>:</span> <span class="comment"># 一个装饰器类</span>
    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func)</span>:</span>
        <span class="keyword">print</span> <span class="string">'in decorator __init__'</span>
        self.func = func
        self.calls = <span class="number">0</span>
    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args)</span>:</span>
        <span class="keyword">print</span> <span class="string">'in decorator __call__'</span>
        self.calls += <span class="number">1</span>
        <span class="keyword">print</span> <span class="string">"calls = %d"</span> % (self.calls)
        self.func(*args)

<span class="decorator">@decorator</span>
<span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x, y)</span>:</span>
    <span class="keyword">print</span> <span class="string">"x = %d, y = %d"</span> % (x, y)

foo(<span class="number">1</span>, <span class="number">2</span>) <span class="comment"># 第一次调用</span>
<span class="string">"""
in decorator __init__
in decorator __call__
calls = 1
x = 1, y = 2
"""</span>

foo(<span class="number">2</span>, <span class="number">3</span>) <span class="comment"># 第二次调用</span>
<span class="string">"""
in decorator __call__
calls = 2
x = 2, y = 3
"""</span>
</pre></td></tr></table></figure>

<h3 id="-88c5-9970-5668-53c2-6570-">装饰器参数</h3>
<figure class="highlight lang-python"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">decorator_wrapper</span><span class="params">(a, b)</span>:</span>
    <span class="keyword">print</span> <span class="string">'in decorator_wrapper'</span>
    <span class="keyword">print</span> <span class="string">"a = %d, b = %d"</span> % (a, b)
    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span>
        <span class="keyword">print</span> <span class="string">'in decorator'</span>
        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args)</span>:</span>
            <span class="keyword">print</span> <span class="string">'in wrapper'</span>
            func(*args)
        <span class="keyword">return</span> wrapper
    <span class="keyword">return</span> decorator

<span class="decorator">@decorator_wrapper(1, 2) # 这里先回执行 decorator_wrapper(1, 2), 返回 decorator 相当于 @decorator</span>
<span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(word)</span>:</span>
    <span class="keyword">print</span> word

foo(<span class="string">'Hello World!'</span>)
<span class="string">"""
in decorator_wrapper
a = 1, b = 2
in decorator
in wrapper
Hello World!
"""</span>
</pre></td></tr></table></figure>

<h2 id="functools_-6a21-5757-">functools 模块</h2>
<p>functools 模块中有三个主要的函数 partial(), update_wrapper() 和 wraps(), 下面我们分别来看一下吧。</p>
<h3 id="partial-28-func-5b-2c-3c-em-3e-args-5d-5b-2c-_-2a-3c-2f-em-3e-keywords-5d-29-">partial(func[,<em>args][, *</em>keywords])</h3>
<p>看源码时发现这个函数不是用 python 写的，而是用 C 写的，但是帮助文档中给出了用 python 实现的代码，如下：</p>
<figure class="highlight lang-python"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">partial</span><span class="params">(func, *args, **keywords)</span>:</span>
    <span class="function"><span class="keyword">def</span> <span class="title">newfunc</span><span class="params">(*fargs, **fkeywords)</span>:</span>
        newkeywords = keywords.copy()
        newkeywords.update(fkeywords)
        <span class="keyword">return</span> func(*(args + fargs), **newkeywords)
    newfunc.func = func
    newfunc.args = args
    newfunc.keywords = keywords
    <span class="keyword">return</span> newfunc
</pre></td></tr></table></figure>

<p>OK，可能一下子没看明白，那么继续往下看，看一下是怎么用的。我们知道 python 中有个 <code>int([x[,base]])</code> 函数，作用是把字符串转换为一个普通的整型。如果要把所有输入的二进制数转为整型，那么就要这样写 <code>int(&#39;11&#39;, base=2)</code>。这样写起来貌似不太方便，那么我们就能用 partial 来实现值传递一个参数就能转换二进制数转为整型的方法。</p>
<figure class="highlight lang-python"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="keyword">from</span> functools <span class="keyword">import</span> partial
int2 = partial(int, base=<span class="number">2</span>)

<span class="keyword">print</span> int2(<span class="string">'11'</span>) <span class="comment"># 3</span>
<span class="keyword">print</span> int2(<span class="string">'101'</span>) <span class="comment"># 5</span>
</pre></td></tr></table></figure>

<h3 id="update_wrapper-28-wrapper-2c-_wrapped-5b-2c-_assigned-5d-5b-2c-_updated-5d-29-">update_wrapper(wrapper, wrapped[, assigned][, updated])</h3>
<p>看这个函数的源代码发现，它就是把被封装的函数的 <strong>module</strong>, <strong>name</strong>, <strong>doc</strong> 和 <strong>dict</strong> 复制到封装的函数中去，源码如下，很简单的几句：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre>WRAPPER_ASSIGNMENTS = (<span class="string">'__module__'</span>, <span class="string">'__name__'</span>, <span class="string">'__doc__'</span>)
WRAPPER_UPDATES = (<span class="string">'__dict__'</span>,)
<span class="function"><span class="keyword">def</span> <span class="title">update_wrapper</span><span class="params">(wrapper,
                   wrapped,
                   assigned = WRAPPER_ASSIGNMENTS,
                   updated = WRAPPER_UPDATES)</span>:</span>
    <span class="keyword">for</span> attr <span class="keyword">in</span> assigned:
        setattr(wrapper, attr, getattr(wrapped, attr))
    <span class="keyword">for</span> attr <span class="keyword">in</span> updated:
        getattr(wrapper, attr).update(getattr(wrapped, attr, {}))
    <span class="keyword">return</span> wrapper
</pre></td></tr></table></figure>

<p>具体如何用我们可以往下看一下。</p>
<h3 id="wraps-28-wrapped-5b-2c-_assigned-5d-5b-2c-_updated-5d-29-">wraps(wrapped[, assigned][, updated])</h3>
<p>wraps() 函数把用 partial() 把 update_wrapper() 给封装了一下。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">wraps</span><span class="params">(wrapped,
          assigned = WRAPPER_ASSIGNMENTS,
          updated = WRAPPER_UPDATES)</span>:</span>

    <span class="keyword">return</span> partial(update_wrapper, wrapped=wrapped,
                   assigned=assigned, updated=updated)
</pre></td></tr></table></figure>

<p>好，接下来看一下是如何使用的，这才恍然大悟，一直在很多开源项目的代码中看到如下使用。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre><span class="keyword">from</span> functools <span class="keyword">import</span> wraps
<span class="function"><span class="keyword">def</span> <span class="title">my_decorator</span><span class="params">(f)</span>:</span>
     <span class="decorator">@wraps(f)</span>
     <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwds)</span>:</span>
         <span class="keyword">print</span> <span class="string">'Calling decorated function'</span>
         <span class="keyword">return</span> f(*args, **kwds)
     <span class="keyword">return</span> wrapper

<span class="decorator">@my_decorator</span>
<span class="function"><span class="keyword">def</span> <span class="title">example</span><span class="params">()</span>:</span>
    <span class="string">"""这里是文档注释"""</span>
    <span class="keyword">print</span> <span class="string">'Called example function'</span>

example()

<span class="comment"># 下面是输出</span>
<span class="string">"""
Calling decorated function
Called example function
"""</span>
<span class="keyword">print</span> example.__name__ <span class="comment"># 'example'</span>
<span class="keyword">print</span> example.__doc__ <span class="comment"># '这里是文档注释'</span>
</pre></td></tr></table></figure>

]]></content>
    <category scheme="http://blog.jkey.lu/tags/python/" term="python"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Backbone.js 中的 model 是什么？]]></title>
    <link href="http://blog.jkey.lu/2013/03/03/what-is-a-model-in-backbone/"/>
    <id>http://blog.jkey.lu/2013/03/03/what-is-a-model-in-backbone/</id>
    <published>2013-03-03T05:55:58.000Z</published>
    <updated>2013-03-03T13:40:18.000Z</updated>
    <content type="html"><![CDATA[<p>根据维基百科上对 <a href="http://zh.wikipedia.org/wiki/MVC" target="_blank">MVC</a> 的定义，我们很难搞懂 model 到底是个什么东西。Backbone.js 的作者对 model 在 backbone.js 中的定义如下。</p>
<blockquote>
<p>Models are the heart of any JavaScript application, containing the interactive data as well as a large part of the logic surrounding it: conversions, validations, computed properties, and access control.</p>
</blockquote>
<p>所以接下来让我们创建一个 model 来搞懂到底什么是 model。</p>
<figure class="highlight lang-javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="keyword">var</span> Person = Backbone.Model.extend({
    initialize: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
        alert(<span class="string">'Welcome to this world'</span>);
    }
});
</pre></td></tr></table></figure>

<p>所以 <em>initialize()</em> 会在初始化 model 为一个新的实例时被触发（models, collections 和 views 都是一样的）。当然你可以在写你的 model 时不写初始化函数，但是你会发现你会很平凡的使用它。</p>
<a id="more"></a>

<h2 id="-8bbe-7f6e-5c5e-6027-">设置属性</h2>
<p>然后我们想在实例化一个 model 时传递一些参数给它。</p>
<figure class="highlight lang-javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="keyword">var</span> Person = Backbone.Model.extend({
    initialize: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
        alert(<span class="string">'Welcome to this world'</span>);
    }
});

<span class="keyword">var</span> person = <span class="keyword">new</span> Person({name: <span class="string">'Thomas'</span>, age: <span class="number">67</span>});
<span class="comment">// 或者我们可以在实例化以后设置，这两个操作是相同的</span>
<span class="keyword">var</span> person = <span class="keyword">new</span> Person();
person.set({name: <span class="string">'Thomas'</span>, age: <span class="number">67</span>});
</pre></td></tr></table></figure>

<p>所以调用 <em>model.set()</em> 和给构造函数传递一个 JavaScript 对象的效果是相同的。当我们设置了 models 的属性后，我们接下来看看如何去获取它们。</p>
<h2 id="-83b7-53d6-5c5e-6027-">获取属性</h2>
<p>使用 <em>model.get()</em> 方法来获取 model 实例的属性。</p>
<figure class="highlight lang-javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="keyword">var</span> Person = Backbone.Model.extend({
    initialize: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
        alert(<span class="string">'Welcome to this world'</span>);
    }
});

<span class="keyword">var</span> person = <span class="keyword">new</span> Person({name: <span class="string">'Thomas'</span>, age: <span class="number">67</span>, child: <span class="string">'Ryan'</span>});

<span class="keyword">var</span> age = person.get(<span class="string">'age'</span>); <span class="comment">// 67</span>
<span class="keyword">var</span> name = person.get(<span class="string">'name'</span>); <span class="comment">// 'Thomas'</span>
<span class="keyword">var</span> child = person.get(<span class="string">'child'</span>); <span class="comment">// 'Ryan'</span>
</pre></td></tr></table></figure>

<h2 id="-8bbe-7f6e-_model_-7684-9ed8-8ba4-503c-">设置 model 的默认值</h2>
<p>有时候你想实例化 model 后就有默认值。其实，这也很简单，只要在你定义 model 时设置名字为 ‘defaults’ 的属性。</p>
<figure class="highlight lang-javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="keyword">var</span> Person = Backbone.Model.extend({
    defaults: {
        name: <span class="string">'Fetus'</span>,
        age: <span class="number">0</span>,
        child: <span class="string">''</span>
    },
    initialize: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
        alert(<span class="string">'Welcome to this world'</span>);
    }
});

<span class="keyword">var</span> person = <span class="keyword">new</span> Person({name: <span class="string">'Thomas'</span>, age: <span class="number">67</span>, child: <span class="string">'Ryan'</span>});

<span class="keyword">var</span> age = person.get(<span class="string">'age'</span>); <span class="comment">// 67</span>
<span class="keyword">var</span> name = person.get(<span class="string">'name'</span>); <span class="comment">// 'Thomas'</span>
<span class="keyword">var</span> child = person.get(<span class="string">'child'</span>); <span class="comment">// 'Ryan'</span>
</pre></td></tr></table></figure>

<h2 id="-64cd-4f5c-_model_-5c5e-6027-">操作 model 属性</h2>
<p>在 models 中可以自定义方法来操作相关属性。默认所有方法都是公共可访问的。</p>
<figure class="highlight lang-javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="keyword">var</span> Person = Backbone.Model.extend({
    defaults: {
        name: <span class="string">'Fetus'</span>,
        age: <span class="number">0</span>,
        child: <span class="string">''</span>
    },
    initialize: <span class="function"><span class="keyword">function</span> <span class="params">()</span>{</span>
        alert(<span class="string">"Welcome to this world"</span>);
    },
    adopt: <span class="function"><span class="keyword">function</span> <span class="params">(newChildsName)</span> {</span>
        <span class="keyword">this</span>.set({child: newChildsName});
    }
});

<span class="keyword">var</span> person = <span class="keyword">new</span> Person({ name: <span class="string">"Thomas"</span>, age: <span class="number">67</span>, child: <span class="string">'Ryan'</span>});
person.adopt(<span class="string">'John Resig'</span>);
<span class="keyword">var</span> child = person.get(<span class="string">"child"</span>); <span class="comment">// 'John Resig'</span>
</pre></td></tr></table></figure>

<p>显而易见，我们能用自定义方法来实现 get/set 操作，也可以执行一些其他会使用到 model 中属性的计算。</p>
<h2 id="-76d1-542c-_model_-4e2d-503c-6539-53d8-7684-4e8b-4ef6-">监听 model 中值改变的事件</h2>
<figure class="highlight lang-javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="keyword">var</span> Person = Backbone.Model.extend({
    defaults: {
        name: <span class="string">'Fetus'</span>,
        age: <span class="number">0</span>
    },
    initialize: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
        alert(<span class="string">'Welcome to this world'</span>);
        <span class="keyword">this</span>.on(<span class="string">'change:name'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(model)</span> {</span>
            <span class="keyword">var</span> name = model.get(<span class="string">'name'</span>); <span class="comment">// 'Stewwie Griffin'</span>
            alert(<span class="string">'Change my name to '</span> + name);
        });
    }
});

<span class="keyword">var</span> person = <span class="keyword">new</span> Person({name: <span class="string">'Thomas'</span>, age: <span class="number">67</span>});
person.set({name: <span class="string">'Stewie Griffin'</span>}); <span class="comment">// 这会触发一个 change 事件</span>
</pre></td></tr></table></figure>

<p>可以看到我们可以为个别属性单独绑定事件监听者，或者直接 <code>this.on(&#39;change&#39;, function (model) {});</code> 来监听所有属性改变的事件。</p>
<h2 id="-4e0e-670d-52a1-5668-4ea4-4e92-">与服务器交互</h2>
<p>Models 是用来描述服务器端返回的数据和你对 RESTful URL 发送数据时的操作。</p>
<p>models 中属性 <code>id</code> 应该与数据库中映射的<a href="http://zh.wikipedia.org/wiki/%E5%85%B3%E7%B3%BB%E9%94%AE#.E4.BB.A3.E7.90.86.E9.8D.B5" target="_blank">代理键</a>相对应，一般我们都直接用主键，可以快速索引到我们要的数据。</p>
<p>假设我们的 mysql 数据库上有一张 <code>Users</code> 表，这张表中有三个字段，分别为 <code>id</code>, <code>name</code>, <code>email</code>。</p>
<p>并且服务器端已经实现了能够为我们提供数据的 RESTful URL, 地址为 <code>/user</code> 的 。</p>
<p>我们的 model 定义应该如下：</p>
<p>Models are used to represent data from your server and actions you perform on them will be translated to RESTful operations.</p>
<figure class="highlight lang-javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="keyword">var</span> UserModel = Backbone.Model.extend({
    urlRoot: <span class="string">'/user'</span>,
    <span class="keyword">default</span>: {
        name: <span class="string">''</span>,
        email: <span class="string">''</span>
    }
});
</pre></td></tr></table></figure>

<h3 id="-521b-5efa-4e00-4e2a-65b0-7684-_model">创建一个新的 model</h3>
<figure class="highlight lang-javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="keyword">var</span> UserModel = Backbone.Model.extend({
    urlRoot: <span class="string">'/user'</span>,
    defaults: {
        name: <span class="string">''</span>,
        email: <span class="string">''</span>
    }
});
<span class="keyword">var</span> user = <span class="keyword">new</span> UserModel();
<span class="comment">// 注意我们没有设置 'id'</span>
<span class="keyword">var</span> userDetails = {
    name: <span class="string">'Thomas'</span>,
    email: <span class="string">'thomasalwyndavis@gmail.com'</span>
};
<span class="comment">// 由于我们没有设置 'id'，所以 backbone 会通过 POST /user</span>
<span class="comment">// 发送 a payload of {name: 'Thomas', email: 'thomasalwyndavis@gmail.com'}</span>
<span class="comment">// 服务器保存数据并返回一个包含 'id' 的响应</span>
user.save(userDetails, {
    success: <span class="function"><span class="keyword">function</span> <span class="params">(user)</span> {</span>
        alert(user.toJSON());
    }
});
</pre></td></tr></table></figure>

<p>我们数据库表中就有了一行数据:</p>
<p>1, ‘Thomas’, ‘thomasalwyndavis@gmail.com’</p>
<h3 id="-83b7-53d6-4e00-4e2a-_model_-5b9e-4f8b-">获取一个 model 实例</h3>
<p>现在我们数据表中就有了一条 user 的数据，我们就能够从服务器上获取了。从上面的例子中我们知道我们数据库中有一条 <code>id</code> 为 1 的数据行。</p>
<p>如果用 <code>id</code> 来实例化一个 model, Backbone.js 会自动请求 <code>urlRoot + &#39;/id&#39;</code>（遵循 RESTful 约定）。</p>
<figure class="highlight lang-javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="comment">// 我们在这里设置 'id'</span>
<span class="keyword">var</span> user = <span class="keyword">new</span> UserModel({id: <span class="number">1</span>});

<span class="comment">// 调用 fetch 会执行 GET /user/1 的请求</span>
<span class="comment">// 服务器应该返回 id, name 和 email</span>
user.fetch({
    success: <span class="function"><span class="keyword">function</span> <span class="params">(user)</span> {</span>
        alert(user.toJSON());
    }
});
</pre></td></tr></table></figure>

<h3 id="-66f4-65b0-4e00-4e2a-_model">更新一个 model</h3>
<p>现在我们有了一个 model，并且这个 model 中的数据也存在于数据库中，这时我们就可以用 PUT 请求来执行更新操作。我们依旧调用 <code>save</code> 函数保存更新数据，这时 Backbone.js 会很智能的用 PUT 请求来代替 POST 请求如果在 <code>id</code> 设置了的情况下（遵循 RESTful 约定）。</p>
<figure class="highlight lang-javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="comment">// 在这里我们设置了 'id'</span>
<span class="keyword">var</span> user = <span class="keyword">new</span> UserModel({
    id: <span class="number">1</span>,
    name: <span class="string">'Thomas'</span>,
    email: <span class="string">'thomasalwyndavis@gmail.com'</span>
});

<span class="comment">// 让我们修改一下 name 属性的值并且更新它</span>
<span class="comment">// 由于设置了 'id', Backbone.js 会发送</span>
<span class="comment">// PUT /user/1 with a payload of {name: 'Davis', email: 'thomasalwyndavis@gmail.com'}</span>
user.save({name: <span class="string">'Davis'</span>}, {
    success: <span class="function"><span class="keyword">function</span> <span class="params">(model)</span> {</span>
        alert(user.toJSON());
    }
});
</pre></td></tr></table></figure>

<h3 id="-5220-9664-4e00-4e2a-_model">删除一个 model</h3>
<p>当我们有一个设置了 <code>id</code> 的 model，并且知道服务器上有一条与这个 <code>id</code> 对应的数据，那么如果我们想把它从数据库中删除时就可以调用 <code>destroy</code> 函数。</p>
<p><code>destroy</code> 会发送 DELETE /user/id 的请求（遵循 RESTful 约定）。</p>
<figure class="highlight lang-javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="comment">// 这里我们设置了 'id'</span>
<span class="keyword">var</span> user = <span class="keyword">new</span> UserModel({
    id: <span class="number">1</span>,
    name: <span class="string">'Thomas'</span>,
    email: <span class="string">'thomasalwyndavis@gmail.com'</span>
});

<span class="comment">// 由于我们设置了 'id', 所以 Backbone.js 会发送</span>
<span class="comment">// DELETE /user/1</span>
user.destroy({
    success: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
        alert(<span class="string">'Destroyed'</span>);
    }
});
</pre></td></tr></table></figure>

<h3 id="-63d0-793a-548c-5c0f-7a8d-95e8-">提示和小窍门</h3>
<p><em>获取所有当前属性</em></p>
<figure class="highlight lang-javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="keyword">var</span> person = <span class="keyword">new</span> Person({name: <span class="string">'Thomas'</span>, age: <span class="number">67</span>});
<span class="keyword">var</span> attributes = person.toJSON(); <span class="comment">// {name: 'Thomas', age: 67}</span>
<span class="comment">/* 这是简单直接的返回所有属性的一份拷贝 */</span>

<span class="keyword">var</span> attributes = person.attributes;
<span class="comment">/*
通过上面一行的写法，我们可以获得 model 中 attributes 属性的应用，这时我们应该小心的操作它。
最佳实践是我们建议使用 .set() 来修改 model 中属性的值，这样也可以触发 backbone 的事件。
*/</span>
</pre></td></tr></table></figure>

<p><em>在设置或保存数据前进行验证</em></p>
<figure class="highlight lang-javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="keyword">var</span> Person = Backbone.Model.extend({
    <span class="comment">// 如果你在验证函数中返回一个字符串</span>
    <span class="comment">// Backbone 将会抛出一个包含你返回的字符串的错误对象</span>
    validate: <span class="function"><span class="keyword">function</span> <span class="params">(attributes)</span> {</span>
        <span class="keyword">if</span> (attributes &lt; <span class="number">0</span> && attributes.name != <span class="string">'Dr Manhatten'</span>) {
            <span class="keyword">return</span> <span class="string">'You can not be negative years old'</span>;
        }
    },
    initialize: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
        alert(<span class="string">'Welcome to this world'</span>);
        <span class="keyword">this</span>.bind(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(model, error)</span> {</span>
            <span class="comment">// 在这里我们可以接收错误，记录它。</span>
            alert(error);
        });
    }
});

<span class="keyword">var</span> person = <span class="keyword">new</span> Person();
person.set({name: <span class="string">'Mary Poppins'</span>, age: -<span class="number">1</span>});
<span class="comment">// 验证没有通过，会抛出错误</span>

<span class="keyword">var</span> person = <span class="keyword">new</span> Person();
person.set({name: <span class="string">'Dr Manhatten'</span>, age: -<span class="number">1</span>});
</pre></td></tr></table></figure>

<h2 id="-6211-78b0-5230-7684-95ee-9898-">我碰到的问题</h2>
<p>我用 <code>fetch</code> 来获取数据时，服务器端返回的数据不是完全一致的，这时候我就要重写 <code>parse</code> 函数。</p>
<figure class="highlight lang-javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="comment">/*
服务器端返回的数据格式：
{success: true, user: {id: 1, name: 'jKey', email: 'hello.world@gmail.com'}}
*/</span>
<span class="keyword">var</span> UserModel = Backbone.Model.extend({
    parse: <span class="function"><span class="keyword">function</span><span class="params">(resp, options)</span> {</span>
        <span class="keyword">return</span> resp.user;
    }
});

<span class="keyword">var</span> user = <span class="keyword">new</span> UserModel({id: <span class="number">1</span>});

user.fetch({
    success: <span class="function"><span class="keyword">function</span> <span class="params">(user)</span> {</span>
        alert(user.toJSON());
        <span class="comment">// {id: 1, name: 'jKey', email: 'hello.world@gmail.com'}</span>
    }
});
</pre></td></tr></table></figure>

<p>还有一个有用的，就是当你改变了一个属性的值后，又想获取之前那个值时，可以使用 <code>previous</code> 函数。</p>
<figure class="highlight lang-javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="keyword">var</span> bill = <span class="keyword">new</span> Backbone.Model({name: <span class="string">'Bill Smith'</span>});

bill.on(<span class="string">'change:name'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(model, name)</span> {</span>
    alert(<span class="string">'Changed name from '</span> + bill.previous(<span class="string">'name'</span>) + <span class="string">'to'</span> + name);
})

bill.set({name: <span class="string">'Bill Jones'</span>});
</pre></td></tr></table></figure>

<h2 id="-5173-4e8e-672c-6587-">关于本文</h2>
<p>为了学习 Backbone.js，网上找到了 <a href="http://backbonetutorials.com/" target="_blank"><a href="http://backbonetutorials.com/">http://backbonetutorials.com/</a></a> 这个网站。所以，边翻译边学，记录下来也是为了加深记忆。</p>
<h2 id="-76f8-5173-94fe-63a5-">相关链接</h2>
<p><a href="http://backbonetutorials.com/what-is-a-model/" target="_blank">What is a model?</a></p>
<p><a href="http://backbonejs.org/#Model" target="_blank">Backbone.Model</a></p>
<p>基于版本：<a href="https://github.com/thomasdavis/backbonetutorials/tree/9e4aba0af8b56538e6cdda034770c4971a43c181" target="_blank">9e4aba0af8</a></p>
]]></content>
    <category scheme="http://blog.jkey.lu/tags/backbone/" term="backbone"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[python 中 *args 和 **kwargs]]></title>
    <link href="http://blog.jkey.lu/2013/02/24/python-args-and-kwargs/"/>
    <id>http://blog.jkey.lu/2013/02/24/python-args-and-kwargs/</id>
    <published>2013-02-24T04:56:35.000Z</published>
    <updated>2013-03-03T15:07:13.000Z</updated>
    <content type="html"><![CDATA[<p>python 中的 <em>args 和 *</em>kwargs 真是个神奇的东西，看了书研究了一下 python 的参数匹配模型，顺便记录下来，感觉自己记性总是不怎么好。</p>
<h2 id="1-_-4f4d-7f6e-ff1a-4ece-505a-81f3-53f3-8fdb-884c-5339-914d-">1. 位置：从做至右进行匹配</h2>
<p>这种应该是最常见的一种了，看下面代码，一看便知了。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b, c)</span>:</span>
    print(a, b, c)

foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment"># (1, 2, 3)</span>
</pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="2-_-5173-952e-5b57-53c2-6570-ff1a-901a-8fc7-53c2-6570-540d-8fdb-884c-5339-914d-">2. 关键字参数：通过参数名进行匹配</h2>
<p>调用的函数可以定义哪一个函数参数接受这个值，好吧，还是看代码把。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b, c)</span>:</span>
    print(a, b, c)

<span class="comment"># 注意这里传递参数时的顺序可以与定义的顺序不一致</span>
foo(b=<span class="number">1</span>, a=<span class="number">2</span>, c=<span class="number">3</span>) <span class="comment"># (2, 1, 3)</span>
foo(<span class="number">1</span>, c=<span class="number">2</span>, b=<span class="number">3</span>) <span class="comment"># (1, 3, 2)</span>
</pre></td></tr></table></figure>

<h2 id="3-_-9ed8-8ba4-53c2-6570-ff1a-4e3a-6ca1-6709-4f20-5165-503c-7684-53c2-6570-5b9a-4e49-53c2-6570-503c-">3. 默认参数：为没有传入值的参数定义参数值</h2>
<p>顾名思义，就是在定义函数时同时定义某个参数的默认值</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b=<span class="number">1</span>, c=<span class="number">4</span>)</span>:</span>
    print(a, b, c)

foo(<span class="number">1</span>) <span class="comment"># (1, 1, 4)</span>
foo(<span class="number">1</span>, c=<span class="number">2</span>) <span class="comment"># (1, 1, 2)</span>
</pre></td></tr></table></figure>

<h2 id="4-_-53ef-53d8-53c2-6570-ff1a-6536-96c6-4efb-610f-591a-5173-4e8e-4f4d-7f6e-6216-5173-952e-5b57-7684-53c2-6570-">4. 可变参数：收集任意多关于位置或关键字的参数</h2>
<p>好吧，终于到了重点，写到这里感觉这篇文章根本不应该叫这个名字，哎，算了。</p>
<p>在函数头用 * 定义的参数是用来收集调用者传进来的参数的，还是看代码吧。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(*args, **kwargs)</span>:</span>
    print(args, kwargs)

foo(<span class="number">1</span>, <span class="number">2</span>, a=<span class="number">3</span>, b=<span class="number">4</span>) <span class="comment"># ((1, 2), {'a': 3, 'b': 4})</span>
</pre></td></tr></table></figure>

<h2 id="5-_-53ef-53d8-53c2-6570-89e3-5305-ff1a-4f20-9012-4efb-610f-591a-7684-57fa-4e8e-4f4d-7f6e-6216-5173-952e-5b57-7684-53c2-6570-">5. 可变参数解包：传递任意多的基于位置或关键字的参数</h2>
<p>当在调用函数时用 * 时，这就意味着解包，就是把参数集合打散，然后传给函数。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b, c, d)</span>:</span>
    print(a, b, c, d)

<span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(*args, **kwargs)</span>:</span> <span class="comment"># 这里的 * 是收集参数的</span>
    print(args, kwargs)
    foo(*args, **kwargs) <span class="comment"># 当在调用函数时用 * 时，则用来解包的</span>

bar(<span class="number">1</span>, <span class="number">2</span>, c=<span class="number">3</span>, d=<span class="number">4</span>)
<span class="comment"># ((1, 2), {'c': 3, 'd': 4})</span>
<span class="comment"># (1, 2, 3, 4)</span>
</pre></td></tr></table></figure>

<p>最后看一个混合的</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b, c, d, e=<span class="number">4</span>)</span>:</span>
    print(a, b, c, d, e)

p1 = [<span class="number">1</span>, <span class="number">2</span>]
p2 = {<span class="string">'d'</span>: <span class="number">3</span>}

foo(<span class="number">0</span>, *p1, d=<span class="number">3</span>) <span class="comment"># (0, 1, 2, 3, 4)</span>
foo(<span class="number">0</span>, *p1, **p2) <span class="comment"># (0, 1, 2, 3, 4)</span>

<span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(a, *args, **kwargs)</span>:</span>
    print(a, args, kwargs)

bar(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, b=<span class="number">4</span>, c=<span class="number">5</span>) <span class="comment"># (1, (2, 3), {'c': 5, 'b': 4})</span>
</pre></td></tr></table></figure>

]]></content>
    <category scheme="http://blog.jkey.lu/tags/python/" term="python"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Ubuntu 上安装 pptp]]></title>
    <link href="http://blog.jkey.lu/2013/02/15/install-pptp-on-ubuntu/"/>
    <id>http://blog.jkey.lu/2013/02/15/install-pptp-on-ubuntu/</id>
    <published>2013-02-15T13:55:35.000Z</published>
    <updated>2013-03-03T15:08:35.000Z</updated>
    <content type="html"><![CDATA[<p>好吧，这其这篇是很久很久以前用 Wordpress 时写的，但是，过去了很久，又快忘了。所以，再写一遍。</p>
<p>先说一下我安装 pptp 的环境是 buyvm 上 128m 的 vps，安装了 ubuntu 系统。</p>
<ol>
<li><p>首先到 /dev/ 和 /dev/net/ 下确认是否有 ppp 和 tun 两个设备</p>
 <figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>/dev/ppp
/dev/<span class="winutils">net</span>/tun
</pre></td></tr></table></figure>
</li>
<li><p>安装 pptpd</p>
<p> <figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>apt-<span class="keyword">get</span> install pptpd
</pre></td></tr></table></figure></p>
 <a id="more"></a>
</li>
<li><p>编辑 /etc/pptpd.conf 文件</p>
 <figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">vim</span> /etc/pptpd.conf
</pre></td></tr></table></figure><br> 去掉一下几句前面的 # 号<br><br> <figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="title">option</span> /etc/ppp/pptpd-options
localip <span class="number">192.168.0.1</span>
remoteip <span class="number">192.168.0.234</span>-<span class="number">238</span>,<span class="number">192.168.0.245</span>
</pre></td></tr></table></figure>
</li>
<li><p>编辑 /etc/ppp/pptpd-options 文件，设置 DNS</p>
 <figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="comment">vim</span> <span class="comment">/etc/ppp/pptpd</span><span class="literal">-</span><span class="comment">options</span>
</pre></td></tr></table></figure><br> 找到 ms-dns 去掉 # 号，并修改 DNS 地址<br><br> <figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="comment">ms</span><span class="literal">-</span><span class="comment">dns</span> <span class="comment">8</span><span class="string">.</span><span class="comment">8</span><span class="string">.</span><span class="comment">8</span><span class="string">.</span><span class="comment">8</span>
<span class="comment">ms</span><span class="literal">-</span><span class="comment">dns</span> <span class="comment">8</span><span class="string">.</span><span class="comment">8</span><span class="string">.</span><span class="comment">4</span><span class="string">.</span><span class="comment">4</span>
</pre></td></tr></table></figure>
</li>
<li><p>编辑 /etc/ppp/chap-secrets ，加入用户</p>
<p> <figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>用户名 pptpd 密码 *
</pre></td></tr></table></figure><br> 解释一下：分别用你自己想要的用户名和密码去替换‘用户名’ 和 ‘密码’，你当然可以添加 n 个，每行一个。</p>
<p> 以上设置完后基本上可以在 windows 上新建 vpn 连接后可以连接了，只是以上的设置只能访问服务器资源，而不能访问这台服务器以外的资源。所以，我们在进行配置。</p>
</li>
<li><p>编辑 /etc/sysctl.conf 文件，找到以下行，去掉 # 号注释符号</p>
 <figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>net<span class="preprocessor">.ipv</span>4<span class="preprocessor">.ip</span>_forward=<span class="number">1</span>
</pre></td></tr></table></figure><br> 然后在运行以下命令使配置生效<br><br> <figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="comment">sysctl</span> <span class="literal">-</span><span class="comment">p</span>
</pre></td></tr></table></figure>
</li>
<li><p>安装 iptables</p>
 <figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>apt-<span class="keyword">get</span> install iptables
</pre></td></tr></table></figure>
</li>
<li><p>向 nat 表中添加一条规则：</p>
<p> <figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>iptables <span class="attribute">-t</span> nat <span class="attribute">-A</span> POSTROUTING <span class="attribute">-s</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.0</span><span class="subst">/</span><span class="number">24</span> <span class="attribute">-o</span> venet0 <span class="attribute">-j</span> MASQUERADE
<span class="comment">//venet0是物理网卡，用 ifconfig 查看</span>
</pre></td></tr></table></figure><br> 如果执行这条命令后提示</p>
<p> <figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="attribute">iptables</span>: <span class="string">No chain/target/match by that name.</span>
</pre></td></tr></table></figure><br> 那么改为以下命令重新执行：</p>
<p> <figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="comment">iptables</span> <span class="literal">-</span><span class="comment">t</span> <span class="comment">nat</span> <span class="literal">-</span><span class="comment">A</span> <span class="comment">POSTROUTING</span> <span class="literal">-</span><span class="comment">s</span> <span class="comment">192</span><span class="string">.</span><span class="comment">168</span><span class="string">.</span><span class="comment">0</span><span class="string">.</span><span class="comment">0/24</span> <span class="literal">-</span><span class="comment">o</span> <span class="comment">venet0</span> <span class="literal">-</span><span class="comment">j</span> <span class="comment">SNAT</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">to</span><span class="literal">-</span><span class="comment">source</span> <span class="comment">xxx</span><span class="string">.</span><span class="comment">xxx</span><span class="string">.</span><span class="comment">xxx</span><span class="string">.</span><span class="comment">xxx</span>
</pre></td></tr></table></figure><br> 最后的 xxx.xxx.xxx.xxx 是你 vps 的 ip 地址。</p>
</li>
<li><p>虽然现在设置好了 iptables 但是下次重启时会被清除，所以我们需要把它保存下来</p>
<p> <figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="comment">iptables</span><span class="literal">-</span><span class="comment">save</span> &gt; <span class="comment">/etc/iptables</span><span class="literal">-</span><span class="comment">rules</span>
</pre></td></tr></table></figure><br> 然后修改 /etc/network/interfaces 文件，找到 venet0 的结点，添加 pre-up 那一行：</p>
<p> <figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="comment">auto</span> <span class="comment">venet0</span>
<span class="comment">iface</span> <span class="comment">venet0</span> <span class="comment">inet</span> <span class="comment">static</span>
<span class="comment">pre</span><span class="literal">-</span><span class="comment">up</span> <span class="comment">iptables</span><span class="literal">-</span><span class="comment">restore</span> &lt; <span class="comment">/etc/iptables</span><span class="literal">-</span><span class="comment">rules</span>
</pre></td></tr></table></figure><br> 这样重启后会自动加载之前设置好的 iptables 规则。</p>
<p> 但是有可能每次重启后 interfaces 都会被重写还原,那么上面方法就失效了。</p>
<p> 而我用的方法是在 /etc/rc.local 文件中添加一行 <code>iptables-restore /etc/iptables-rules</code></p>
<p> 当然你也可以在每次重启后手动执行 <code>iptables-restore /etc/iptables-rules</code></p>
<p> 好了这样就设置好了。</p>
</li>
</ol>
<p>参考文章：</p>
<ol>
<li><p><a href="http://wiki.wowubuntu.com/linux/openvz-archlinux-pptp-vpn" target="_blank">OpenVZ VPS 上架设 PPTP VPN</a></p>
</li>
<li><p><a href="http://qiaodahai.com/personal/article/2010/debian-ubuntu-setup-pptp-vpn.htm" target="_blank">Debian/Ubuntu快速搭建PPTP VPN</a></p>
</li>
<li><p><a href="http://pityonline.info/?p=1054" target="_blank">Install and Configure OpenVPN</a></p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[感觉最近不能掌控自己了]]></title>
    <link href="http://blog.jkey.lu/2013/02/02/began-to-lose-control/"/>
    <id>http://blog.jkey.lu/2013/02/02/began-to-lose-control/</id>
    <published>2013-02-02T11:58:10.000Z</published>
    <updated>2013-02-16T15:46:34.000Z</updated>
    <content type="html"><![CDATA[<p>最近感觉自己很累，每天想僵尸一样的生活。确切的说现在的生活就像把自己的大脑放进一具僵尸的身体里，虽然能够清楚的看清周围，但是身体已经完全不受大脑控制了。每天做着意义不大的机械运动，渐渐的身体疲惫了，身体对大脑说“我累了，我要停下来休息一下”，大脑说“刹车已经坏很久了，你现在做的运动完全靠的是惯性，我已经失去了控制”。</p>
<p>去年买了两本书《拖延心理学》和《拆掉思维的墙》，两本书都没有看完，现在烂在那里。两本都只看了一般，初看感觉这本书就是完全在写我的。看了一半没有看完恰恰有印证了这一点，从书中的案例中我看到了自己，知道自己为什么导致了不受自己掌控的原因，但是就是无法改变自己。</p>
<p>就像《拖延心理学》中讲的那样，拖延者每每在经历一次拖延的折磨后，都会毅然决然的下定决心从此不再踏入那个拖延怪圈一步。你发誓，下一次你一定早一点开始，控制好自己……</p>
<p>而我接下来做的也就是毅然决然的下定决心……</p>
<p>去年买了很多书都还没看完，自己的几个 idea 还没实现，空气是免费的。</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://blog.jkey.lu/2013/01/09/hello-world/"/>
    <id>http://blog.jkey.lu/2013/01/09/hello-world/</id>
    <published>2013-01-08T16:18:21.000Z</published>
    <updated>2013-02-16T15:46:34.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://zespia.tw/hexo" target="_blank">Hexo</a>! This is your very first post. Check <a href="http://zespia.tw/hexo/docs" target="_blank">documentation</a> to learn how to use.</p>
]]></content>
  </entry>
</feed>
