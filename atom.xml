<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[jKey Blog]]></title>
  <link href="http://blog.jkey.lu/atom.xml" rel="self"/>
  <link href="http://blog.jkey.lu"/>
  <updated>2013-03-03T15:15:22.721Z</updated>
  <id>http://blog.jkey.lu/</id>
  <author>
    <name><![CDATA[jKey Lu]]></name>
    <email><![CDATA[i@jkey.lu]]></email>
  </author>
  <generator uri="http://zespia.tw/hexo">Hexo</generator>
  <entry>
    <title type="html"><![CDATA[Ubuntu 上安装 pptp]]></title>
    <link href="http://blog.jkey.lu/2013/02/15/install-pptp-on-ubuntu/"/>
    <id>http://blog.jkey.lu/2013/02/15/install-pptp-on-ubuntu/</id>
    <published>2013-02-15T13:55:35.000Z</published>
    <updated>2013-03-03T15:08:35.000Z</updated>
    <content type="html"><![CDATA[<p>好吧，这其这篇是很久很久以前用 Wordpress 时写的，但是，过去了很久，又快忘了。所以，再写一遍。</p>
<p>先说一下我安装 pptp 的环境是 buyvm 上 128m 的 vps，安装了 ubuntu 系统。</p>
<ol>
<li><p>首先到 /dev/ 和 /dev/net/ 下确认是否有 ppp 和 tun 两个设备</p>
<pre><code> <span class="regexp">/dev/</span>ppp
 <span class="regexp">/dev/net/</span>tun
</code></pre>
</li>
<li><p>安装 pptpd</p>
<pre><code> apt-<span class="keyword">get</span> install pptpd
</code></pre>
 <a name="more"></a>
</li>
<li><p>编辑 /etc/pptpd.conf 文件</p>
<pre><code> <span class="title">vim</span> /etc/pptpd.conf
</code></pre>
<p> 去掉一下几句前面的 # 号</p>
<pre><code> <span class="title">option</span> /etc/ppp/pptpd-options
 localip <span class="number">192.168.0.1</span>
 remoteip <span class="number">192.168.0.234</span>-<span class="number">238</span>,<span class="number">192.168.0.245</span>
</code></pre>
</li>
<li><p>编辑 /etc/ppp/pptpd-options 文件，设置 DNS</p>
<pre><code> <span class="title">vim</span> /etc/ppp/pptpd-options
</code></pre>
<p> 找到 ms-dns 去掉 # 号，并修改 DNS 地址</p>
<pre><code> ms-dns 8.8.8.8
 ms-dns 8.8.4.4
</code></pre>
</li>
<li><p>编辑 /etc/ppp/chap-secrets ，加入用户</p>
<pre><code> 用户名 pptpd 密码 *
</code></pre>
<p> 解释一下：分别用你自己想要的用户名和密码去替换‘用户名’ 和 ‘密码’，你当然可以添加 n 个，每行一个。</p>
<p> 以上设置完后基本上可以在 windows 上新建 vpn 连接后可以连接了，只是以上的设置只能访问服务器资源，而不能访问这台服务器以外的资源。所以，我们在进行配置。</p>
</li>
<li><p>编辑 /etc/sysctl.conf 文件，找到以下行，去掉 # 号注释符号</p>
<pre><code> net<span class="variable">.ipv4</span><span class="variable">.ip_forward</span>=<span class="number">1</span>
</code></pre>
<p> 然后在运行以下命令使配置生效</p>
<pre><code> <span class="title">sysctl</span> -p
</code></pre>
</li>
<li><p>安装 iptables</p>
<pre><code> apt-<span class="keyword">get</span> install iptables
</code></pre>
</li>
<li><p>向 nat 表中添加一条规则：</p>
<pre><code> <span class="comment">iptables</span> <span class="literal">-</span><span class="comment">t</span> <span class="comment">nat</span> <span class="literal">-</span><span class="comment">A</span> <span class="comment">POSTROUTING</span> <span class="literal">-</span><span class="comment">s</span> <span class="comment">192</span>.<span class="comment">168</span>.<span class="comment">0</span>.<span class="comment">0/24</span> <span class="literal">-</span><span class="comment">o</span> <span class="comment">venet0</span> <span class="literal">-</span><span class="comment">j</span> <span class="comment">MASQUERADE</span>
 <span class="comment">//venet0是物理网卡，用</span> <span class="comment">ifconfig</span> <span class="comment">查看
</code></pre>
<p> 如果执行这条命令后提示</p>
<pre><code> iptables: No chain/target/match <span class="keyword">by</span> <span class="keyword">that</span> <span class="property">name</span>.
</code></pre>
<p> 那么改为以下命令重新执行：</p>
<pre><code> <span class="comment">iptables</span> <span class="literal">-</span><span class="comment">t</span> <span class="comment">nat</span> <span class="literal">-</span><span class="comment">A</span> <span class="comment">POSTROUTING</span> <span class="literal">-</span><span class="comment">s</span> <span class="comment">192</span>.<span class="comment">168</span>.<span class="comment">0</span>.<span class="comment">0/24</span> <span class="literal">-</span><span class="comment">o</span> <span class="comment">venet0</span> <span class="literal">-</span><span class="comment">j</span> <span class="comment">SNAT</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">to</span>-<span class="comment">source</span> <span class="comment">xxx</span>.<span class="comment">xxx</span>.<span class="comment">xxx</span>.<span class="comment">xxx
</code></pre>
<p> 最后的 xxx.xxx.xxx.xxx 是你 vps 的 ip 地址。</p>
</li>
<li><p>虽然现在设置好了 iptables 但是下次重启时会被清除，所以我们需要把它保存下来</p>
<pre><code> iptables-save &gt; <span class="regexp">/etc/iptables</span>-rules
</code></pre>
<p> 然后修改 /etc/network/interfaces 文件，找到 venet0 的结点，添加 pre-up 那一行：</p>
<pre><code> auto venet0
 iface venet0 inet static
 pre-up iptables-restore <span class="tag">&lt; /<span class="attribute">etc</span>/<span class="attribute">iptables-rules</span>
</code></pre>
<p> 这样重启后会自动加载之前设置好的 iptables 规则。</p>
<p> 但是有可能每次重启后 interfaces 都会被重写还原,那么上面方法就失效了。</p>
<p> 而我用的方法是在 /etc/rc.local 文件中添加一行 <code>iptables-restore /etc/iptables-rules</code></p>
<p> 当然你也可以在每次重启后手动执行 <code>iptables-restore /etc/iptables-rules</code></p>
<p> 好了这样就设置好了。</p>
</li>
</ol>
<p>参考文章：</p>
<ol>
<li><p><a href="http://wiki.wowubuntu.com/linux/openvz-archlinux-pptp-vpn">OpenVZ VPS 上架设 PPTP VPN</a></p>
</li>
<li><p><a href="http://qiaodahai.com/personal/article/2010/debian-ubuntu-setup-pptp-vpn.htm">Debian/Ubuntu快速搭建PPTP VPN</a></p>
</li>
<li><p><a href="http://pityonline.info/?p=1054">Install and Configure OpenVPN</a></p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[感觉最近不能掌控自己了]]></title>
    <link href="http://blog.jkey.lu/2013/02/02/began-to-lose-control/"/>
    <id>http://blog.jkey.lu/2013/02/02/began-to-lose-control/</id>
    <published>2013-02-02T11:58:10.000Z</published>
    <updated>2013-02-16T15:46:34.000Z</updated>
    <content type="html"><![CDATA[<p>最近感觉自己很累，每天想僵尸一样的生活。确切的说现在的生活就像把自己的大脑放进一具僵尸的身体里，虽然能够清楚的看清周围，但是身体已经完全不受大脑控制了。每天做着意义不大的机械运动，渐渐的身体疲惫了，身体对大脑说“我累了，我要停下来休息一下”，大脑说“刹车已经坏很久了，你现在做的运动完全靠的是惯性，我已经失去了控制”。</p>
<p>去年买了两本书《拖延心理学》和《拆掉思维的墙》，两本书都没有看完，现在烂在那里。两本都只看了一般，初看感觉这本书就是完全在写我的。看了一半没有看完恰恰有印证了这一点，从书中的案例中我看到了自己，知道自己为什么导致了不受自己掌控的原因，但是就是无法改变自己。</p>
<p>就像《拖延心理学》中讲的那样，拖延者每每在经历一次拖延的折磨后，都会毅然决然的下定决心从此不再踏入那个拖延怪圈一步。你发誓，下一次你一定早一点开始，控制好自己……</p>
<p>而我接下来做的也就是毅然决然的下定决心……</p>
<p>去年买了很多书都还没看完，自己的几个 idea 还没实现，空气是免费的。</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://blog.jkey.lu/2013/01/09/hello-world/"/>
    <id>http://blog.jkey.lu/2013/01/09/hello-world/</id>
    <published>2013-01-08T16:18:21.000Z</published>
    <updated>2013-02-16T15:46:34.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://zespia.tw/hexo">Hexo</a>! This is your very first post. Check <a href="http://zespia.tw/hexo/docs">documentation</a> to learn how to use.</p>
]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[python 中 *args 和 **kwargs]]></title>
    <link href="http://blog.jkey.lu/2013/02/24/python-args-and-kwargs/"/>
    <id>http://blog.jkey.lu/2013/02/24/python-args-and-kwargs/</id>
    <published>2013-02-24T04:56:35.000Z</published>
    <updated>2013-03-03T15:07:13.000Z</updated>
    <content type="html"><![CDATA[<p>python 中的 <em>args 和 *</em>kwargs 真是个神奇的东西，看了书研究了一下 python 的参数匹配模型，顺便记录下来，感觉自己记性总是不怎么好。</p>
<h2>1. 位置：从做至右进行匹配</h2>
<p>这种应该是最常见的一种了，看下面代码，一看便知了。</p>
<notextile><figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b, c)</span>:</span>
    print(a, b, c)

foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment"># (1, 2, 3)</span>
</pre></td></tr></table></figure></notextile>

<a name="more"></a>

<h2>2. 关键字参数：通过参数名进行匹配</h2>
<p>调用的函数可以定义哪一个函数参数接受这个值，好吧，还是看代码把。</p>
<notextile><figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b, c)</span>:</span>
    print(a, b, c)

<span class="comment"># 注意这里传递参数时的顺序可以与定义的顺序不一致</span>
foo(b=<span class="number">1</span>, a=<span class="number">2</span>, c=<span class="number">3</span>) <span class="comment"># (2, 1, 3)</span>
foo(<span class="number">1</span>, c=<span class="number">2</span>, b=<span class="number">3</span>) <span class="comment"># (1, 3, 2)</span>
</pre></td></tr></table></figure></notextile>

<h2>3. 默认参数：为没有传入值的参数定义参数值</h2>
<p>顾名思义，就是在定义函数时同时定义某个参数的默认值</p>
<notextile><figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b=<span class="number">1</span>, c=<span class="number">4</span>)</span>:</span>
    print(a, b, c)

foo(<span class="number">1</span>) <span class="comment"># (1, 1, 4)</span>
foo(<span class="number">1</span>, c=<span class="number">2</span>) <span class="comment"># (1, 1, 2)</span>
</pre></td></tr></table></figure></notextile>

<h2>4. 可变参数：收集任意多关于位置或关键字的参数</h2>
<p>好吧，终于到了重点，写到这里感觉这篇文章根本不应该叫这个名字，哎，算了。</p>
<p>在函数头用 * 定义的参数是用来收集调用者传进来的参数的，还是看代码吧。</p>
<notextile><figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(<em>args, *</em>kwargs)</span>:</span>
    print(args, kwargs)

foo(<span class="number">1</span>, <span class="number">2</span>, a=<span class="number">3</span>, b=<span class="number">4</span>) <span class="comment"># ((1, 2), {&#39;a&#39;: 3, &#39;b&#39;: 4})</span>
</pre></td></tr></table></figure></notextile>

<h2>5. 可变参数解包：传递任意多的基于位置或关键字的参数</h2>
<p>当在调用函数时用 * 时，这就意味着解包，就是把参数集合打散，然后传给函数。</p>
<notextile><figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b, c, d)</span>:</span>
    print(a, b, c, d)

<span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(<em>args, **kwargs)</span>:</span> <span class="comment"># 这里的 </em> 是收集参数的</span>
    print(args, kwargs)
    foo(<em>args, **kwargs) <span class="comment"># 当在调用函数时用 </em> 时，则用来解包的</span>

bar(<span class="number">1</span>, <span class="number">2</span>, c=<span class="number">3</span>, d=<span class="number">4</span>)
<span class="comment"># ((1, 2), {&#39;c&#39;: 3, &#39;d&#39;: 4})</span>
<span class="comment"># (1, 2, 3, 4)</span>
</pre></td></tr></table></figure></notextile>

<p>最后看一个混合的</p>
<notextile><figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
</pre></td><td class="code"><pre><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b, c, d, e=<span class="number">4</span>)</span>:</span>
    print(a, b, c, d, e)

p1 = [<span class="number">1</span>, <span class="number">2</span>]
p2 = {<span class="string">&#39;d&#39;</span>: <span class="number">3</span>}

foo(<span class="number">0</span>, <em>p1, d=<span class="number">3</span>) <span class="comment"># (0, 1, 2, 3, 4)</span>
foo(<span class="number">0</span>, </em>p1, <strong>p2) <span class="comment"># (0, 1, 2, 3, 4)</span>

<span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(a, *args, </strong>kwargs)</span>:</span>
    print(a, args, kwargs)

bar(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, b=<span class="number">4</span>, c=<span class="number">5</span>) <span class="comment"># (1, (2, 3), {&#39;c&#39;: 5, &#39;b&#39;: 4})</span>
</pre></td></tr></table></figure></notextile>]]></content>
  </entry>
  <entry>
    <title type="html"><![CDATA[Backbone.js 中的 model 是什么？]]></title>
    <link href="http://blog.jkey.lu/2013/03/03/what-is-a-model-in-backbone/"/>
    <id>http://blog.jkey.lu/2013/03/03/what-is-a-model-in-backbone/</id>
    <published>2013-03-03T05:55:58.000Z</published>
    <updated>2013-03-03T13:40:18.000Z</updated>
    <content type="html"><![CDATA[<p>根据维基百科上对 <a href="http://zh.wikipedia.org/wiki/MVC">MVC</a> 的定义，我们很难搞懂 model 到底是个什么东西。Backbone.js 的作者对 model 在 backbone.js 中的定义如下。</p>
<blockquote>
<p>Models are the heart of any JavaScript application, containing the interactive data as well as a large part of the logic surrounding it: conversions, validations, computed properties, and access control.</p>
</blockquote>
<p>所以接下来让我们创建一个 model 来搞懂到底什么是 model。</p>
<notextile><figure class="highlight lang-javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="keyword">var</span> Person = Backbone.Model.extend({
    initialize: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
        alert(<span class="string">&#39;Welcome to this world&#39;</span>);
    }
});
</pre></td></tr></table></figure></notextile>

<p>所以 <em>initialize()</em> 会在初始化 model 为一个新的实例时被触发（models, collections 和 views 都是一样的）。当然你可以在写你的 model 时不写初始化函数，但是你会发现你会很平凡的使用它。</p>
<a name="more"></a>

<h2>设置属性</h2>
<p>然后我们想在实例化一个 model 时传递一些参数给它。</p>
<notextile><figure class="highlight lang-javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="keyword">var</span> Person = Backbone.Model.extend({
    initialize: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
        alert(<span class="string">&#39;Welcome to this world&#39;</span>);
    }
});

<span class="keyword">var</span> person = <span class="keyword">new</span> Person({name: <span class="string">&#39;Thomas&#39;</span>, age: <span class="number">67</span>});
<span class="comment">// 或者我们可以在实例化以后设置，这两个操作是相同的</span>
<span class="keyword">var</span> person = <span class="keyword">new</span> Person();
person.set({name: <span class="string">&#39;Thomas&#39;</span>, age: <span class="number">67</span>});
</pre></td></tr></table></figure></notextile>

<p>所以调用 <em>model.set()</em> 和给构造函数传递一个 JavaScript 对象的效果是相同的。当我们设置了 models 的属性后，我们接下来看看如何去获取它们。</p>
<h2>获取属性</h2>
<p>使用 <em>model.get()</em> 方法来获取 model 实例的属性。</p>
<notextile><figure class="highlight lang-javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="keyword">var</span> Person = Backbone.Model.extend({
    initialize: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
        alert(<span class="string">&#39;Welcome to this world&#39;</span>);
    }
});

<span class="keyword">var</span> person = <span class="keyword">new</span> Person({name: <span class="string">&#39;Thomas&#39;</span>, age: <span class="number">67</span>, child: <span class="string">&#39;Ryan&#39;</span>});

<span class="keyword">var</span> age = person.get(<span class="string">&#39;age&#39;</span>); <span class="comment">// 67</span>
<span class="keyword">var</span> name = person.get(<span class="string">&#39;name&#39;</span>); <span class="comment">// &#39;Thomas&#39;</span>
<span class="keyword">var</span> child = person.get(<span class="string">&#39;child&#39;</span>); <span class="comment">// &#39;Ryan&#39;</span>
</pre></td></tr></table></figure></notextile>

<h2>设置 model 的默认值</h2>
<p>有时候你想实例化 model 后就有默认值。其实，这也很简单，只要在你定义 model 时设置名字为 &#39;defaults&#39; 的属性。</p>
<notextile><figure class="highlight lang-javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="keyword">var</span> Person = Backbone.Model.extend({
    defaults: {
        name: <span class="string">&#39;Fetus&#39;</span>,
        age: <span class="number">0</span>,
        child: <span class="string">&#39;&#39;</span>
    },
    initialize: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
        alert(<span class="string">&#39;Welcome to this world&#39;</span>);
    }
});

<span class="keyword">var</span> person = <span class="keyword">new</span> Person({name: <span class="string">&#39;Thomas&#39;</span>, age: <span class="number">67</span>, child: <span class="string">&#39;Ryan&#39;</span>});

<span class="keyword">var</span> age = person.get(<span class="string">&#39;age&#39;</span>); <span class="comment">// 67</span>
<span class="keyword">var</span> name = person.get(<span class="string">&#39;name&#39;</span>); <span class="comment">// &#39;Thomas&#39;</span>
<span class="keyword">var</span> child = person.get(<span class="string">&#39;child&#39;</span>); <span class="comment">// &#39;Ryan&#39;</span>
</pre></td></tr></table></figure></notextile>

<h2>操作 model 属性</h2>
<p>在 models 中可以自定义方法来操作相关属性。默认所有方法都是公共可访问的。</p>
<notextile><figure class="highlight lang-javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
</pre></td><td class="code"><pre><span class="keyword">var</span> Person = Backbone.Model.extend({
    defaults: {
        name: <span class="string">&#39;Fetus&#39;</span>,
        age: <span class="number">0</span>,
        child: <span class="string">&#39;&#39;</span>
    },
    initialize: <span class="function"><span class="keyword">function</span> <span class="params">()</span>{</span>
        alert(<span class="string">&quot;Welcome to this world&quot;</span>);
    },
    adopt: <span class="function"><span class="keyword">function</span> <span class="params">(newChildsName)</span> {</span>
        <span class="keyword">this</span>.set({child: newChildsName});
    }
});

<span class="keyword">var</span> person = <span class="keyword">new</span> Person({ name: <span class="string">&quot;Thomas&quot;</span>, age: <span class="number">67</span>, child: <span class="string">&#39;Ryan&#39;</span>});
person.adopt(<span class="string">&#39;John Resig&#39;</span>);
<span class="keyword">var</span> child = person.get(<span class="string">&quot;child&quot;</span>); <span class="comment">// &#39;John Resig&#39;</span>
</pre></td></tr></table></figure></notextile>

<p>显而易见，我们能用自定义方法来实现 get/set 操作，也可以执行一些其他会使用到 model 中属性的计算。</p>
<h2>监听 model 中值改变的事件</h2>
<notextile><figure class="highlight lang-javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="keyword">var</span> Person = Backbone.Model.extend({
    defaults: {
        name: <span class="string">&#39;Fetus&#39;</span>,
        age: <span class="number">0</span>
    },
    initialize: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
        alert(<span class="string">&#39;Welcome to this world&#39;</span>);
        <span class="keyword">this</span>.on(<span class="string">&#39;change:name&#39;</span>, <span class="function"><span class="keyword">function</span> <span class="params">(model)</span> {</span>
            <span class="keyword">var</span> name = model.get(<span class="string">&#39;name&#39;</span>); <span class="comment">// &#39;Stewwie Griffin&#39;</span>
            alert(<span class="string">&#39;Change my name to &#39;</span> + name);
        });
    }
});

<span class="keyword">var</span> person = <span class="keyword">new</span> Person({name: <span class="string">&#39;Thomas&#39;</span>, age: <span class="number">67</span>});
person.set({name: <span class="string">&#39;Stewie Griffin&#39;</span>}); <span class="comment">// 这会触发一个 change 事件</span>
</pre></td></tr></table></figure></notextile>

<p>可以看到我们可以为个别属性单独绑定事件监听者，或者直接 <code>this.on(&#39;change&#39;, function (model) {});</code> 来监听所有属性改变的事件。</p>
<h2>与服务器交互</h2>
<p>Models 是用来描述服务器端返回的数据和你对 RESTful URL 发送数据时的操作。</p>
<p>models 中属性 <code>id</code> 应该与数据库中映射的<a href="http://zh.wikipedia.org/wiki/%E5%85%B3%E7%B3%BB%E9%94%AE#.E4.BB.A3.E7.90.86.E9.8D.B5">代理键</a>相对应，一般我们都直接用主键，可以快速索引到我们要的数据。</p>
<p>假设我们的 mysql 数据库上有一张 <code>Users</code> 表，这张表中有三个字段，分别为 <code>id</code>, <code>name</code>, <code>email</code>。</p>
<p>并且服务器端已经实现了能够为我们提供数据的 RESTful URL, 地址为 <code>/user</code> 的 。</p>
<p>我们的 model 定义应该如下：</p>
<p>Models are used to represent data from your server and actions you perform on them will be translated to RESTful operations.</p>
<notextile><figure class="highlight lang-javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="keyword">var</span> UserModel = Backbone.Model.extend({
    urlRoot: <span class="string">&#39;/user&#39;</span>,
    <span class="keyword">default</span>: {
        name: <span class="string">&#39;&#39;</span>,
        email: <span class="string">&#39;&#39;</span>
    }
});
</pre></td></tr></table></figure></notextile>

<h3>创建一个新的 model</h3>
<notextile><figure class="highlight lang-javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="keyword">var</span> UserModel = Backbone.Model.extend({
    urlRoot: <span class="string">&#39;/user&#39;</span>,
    defaults: {
        name: <span class="string">&#39;&#39;</span>,
        email: <span class="string">&#39;&#39;</span>
    }
});
<span class="keyword">var</span> user = <span class="keyword">new</span> UserModel();
<span class="comment">// 注意我们没有设置 &#39;id&#39;</span>
<span class="keyword">var</span> userDetails = {
    name: <span class="string">&#39;Thomas&#39;</span>,
    email: <span class="string">&#39;thomasalwyndavis@gmail.com&#39;</span>
};
<span class="comment">// 由于我们没有设置 &#39;id&#39;，所以 backbone 会通过 POST /user</span>
<span class="comment">// 发送 a payload of {name: &#39;Thomas&#39;, email: &#39;thomasalwyndavis@gmail.com&#39;}</span>
<span class="comment">// 服务器保存数据并返回一个包含 &#39;id&#39; 的响应</span>
user.save(userDetails, {
    success: <span class="function"><span class="keyword">function</span> <span class="params">(user)</span> {</span>
        alert(user.toJSON());
    }
});
</pre></td></tr></table></figure></notextile>

<p>我们数据库表中就有了一行数据:</p>
<p>1, &#39;Thomas&#39;, &#39;thomasalwyndavis@gmail.com&#39;</p>
<h3>获取一个 model 实例</h3>
<p>现在我们数据表中就有了一条 user 的数据，我们就能够从服务器上获取了。从上面的例子中我们知道我们数据库中有一条 <code>id</code> 为 1 的数据行。</p>
<p>如果用 <code>id</code> 来实例化一个 model, Backbone.js 会自动请求 <code>urlRoot + &#39;/id&#39;</code>（遵循 RESTful 约定）。</p>
<notextile><figure class="highlight lang-javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="comment">// 我们在这里设置 &#39;id&#39;</span>
<span class="keyword">var</span> user = <span class="keyword">new</span> UserModel({id: <span class="number">1</span>});

<span class="comment">// 调用 fetch 会执行 GET /user/1 的请求</span>
<span class="comment">// 服务器应该返回 id, name 和 email</span>
user.fetch({
    success: <span class="function"><span class="keyword">function</span> <span class="params">(user)</span> {</span>
        alert(user.toJSON());
    }
});
</pre></td></tr></table></figure></notextile>

<h3>更新一个 model</h3>
<p>现在我们有了一个 model，并且这个 model 中的数据也存在于数据库中，这时我们就可以用 PUT 请求来执行更新操作。我们依旧调用 <code>save</code> 函数保存更新数据，这时 Backbone.js 会很智能的用 PUT 请求来代替 POST 请求如果在 <code>id</code> 设置了的情况下（遵循 RESTful 约定）。</p>
<notextile><figure class="highlight lang-javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre><span class="comment">// 在这里我们设置了 &#39;id&#39;</span>
<span class="keyword">var</span> user = <span class="keyword">new</span> UserModel({
    id: <span class="number">1</span>,
    name: <span class="string">&#39;Thomas&#39;</span>,
    email: <span class="string">&#39;thomasalwyndavis@gmail.com&#39;</span>
});

<span class="comment">// 让我们修改一下 name 属性的值并且更新它</span>
<span class="comment">// 由于设置了 &#39;id&#39;, Backbone.js 会发送</span>
<span class="comment">// PUT /user/1 with a payload of {name: &#39;Davis&#39;, email: &#39;thomasalwyndavis@gmail.com&#39;}</span>
user.save({name: <span class="string">&#39;Davis&#39;</span>}, {
    success: <span class="function"><span class="keyword">function</span> <span class="params">(model)</span> {</span>
        alert(user.toJSON());
    }
});
</pre></td></tr></table></figure></notextile>

<h3>删除一个 model</h3>
<p>当我们有一个设置了 <code>id</code> 的 model，并且知道服务器上有一条与这个 <code>id</code> 对应的数据，那么如果我们想把它从数据库中删除时就可以调用 <code>destroy</code> 函数。</p>
<p><code>destroy</code> 会发送 DELETE /user/id 的请求（遵循 RESTful 约定）。</p>
<notextile><figure class="highlight lang-javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre><span class="comment">// 这里我们设置了 &#39;id&#39;</span>
<span class="keyword">var</span> user = <span class="keyword">new</span> UserModel({
    id: <span class="number">1</span>,
    name: <span class="string">&#39;Thomas&#39;</span>,
    email: <span class="string">&#39;thomasalwyndavis@gmail.com&#39;</span>
});

<span class="comment">// 由于我们设置了 &#39;id&#39;, 所以 Backbone.js 会发送</span>
<span class="comment">// DELETE /user/1</span>
user.destroy({
    success: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
        alert(<span class="string">&#39;Destroyed&#39;</span>);
    }
});
</pre></td></tr></table></figure></notextile>

<h3>提示和小窍门</h3>
<p><em>获取所有当前属性</em></p>
<notextile><figure class="highlight lang-javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="keyword">var</span> person = <span class="keyword">new</span> Person({name: <span class="string">&#39;Thomas&#39;</span>, age: <span class="number">67</span>});
<span class="keyword">var</span> attributes = person.toJSON(); <span class="comment">// {name: &#39;Thomas&#39;, age: 67}</span>
<span class="comment">/<em> 这是简单直接的返回所有属性的一份拷贝 </em>/</span>

<span class="keyword">var</span> attributes = person.attributes;
<span class="comment">/<em>
通过上面一行的写法，我们可以获得 model 中 attributes 属性的应用，这时我们应该小心的操作它。
最佳实践是我们建议使用 .set() 来修改 model 中属性的值，这样也可以触发 backbone 的事件。
</em>/</span>
</pre></td></tr></table></figure></notextile>

<p><em>在设置或保存数据前进行验证</em></p>
<notextile><figure class="highlight lang-javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="keyword">var</span> Person = Backbone.Model.extend({
    <span class="comment">// 如果你在验证函数中返回一个字符串</span>
    <span class="comment">// Backbone 将会抛出一个包含你返回的字符串的错误对象</span>
    validate: <span class="function"><span class="keyword">function</span> <span class="params">(attributes)</span> {</span>
        <span class="keyword">if</span> (attributes &lt; <span class="number">0</span> &amp;&amp; attributes.name != <span class="string">&#39;Dr Manhatten&#39;</span>) {
            <span class="keyword">return</span> <span class="string">&#39;You can not be negative years old&#39;</span>;
        }
    },
    initialize: <span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
        alert(<span class="string">&#39;Welcome to this world&#39;</span>);
        <span class="keyword">this</span>.bind(<span class="string">&#39;error&#39;</span>, <span class="function"><span class="keyword">function</span> <span class="params">(model, error)</span> {</span>
            <span class="comment">// 在这里我们可以接收错误，记录它。</span>
            alert(error);
        });
    }
});

<span class="keyword">var</span> person = <span class="keyword">new</span> Person();
person.set({name: <span class="string">&#39;Mary Poppins&#39;</span>, age: -<span class="number">1</span>});
<span class="comment">// 验证没有通过，会抛出错误</span>

<span class="keyword">var</span> person = <span class="keyword">new</span> Person();
person.set({name: <span class="string">&#39;Dr Manhatten&#39;</span>, age: -<span class="number">1</span>});
</pre></td></tr></table></figure></notextile>

<h2>我碰到的问题</h2>
<p>我用 <code>fetch</code> 来获取数据时，服务器端返回的数据不是完全一致的，这时候我就要重写 <code>parse</code> 函数。</p>
<notextile><figure class="highlight lang-javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="comment">/<em>
服务器端返回的数据格式：
{success: true, user: {id: 1, name: &#39;jKey&#39;, email: &#39;hello.world@gmail.com&#39;}}
</em>/</span>
<span class="keyword">var</span> UserModel = Backbone.Model.extend({
    parse: <span class="keyword">function</span>(resp, options) {
        <span class="keyword">return</span> resp.user;
    }
});

<span class="keyword">var</span> user = <span class="keyword">new</span> UserModel({id: <span class="number">1</span>});

user.fetch({
    success: <span class="function"><span class="keyword">function</span> <span class="params">(user)</span> {</span>
        alert(user.toJSON());
        <span class="comment">// {id: 1, name: &#39;jKey&#39;, email: &#39;hello.world@gmail.com&#39;}</span>
    }
});
</pre></td></tr></table></figure></notextile>

<p>还有一个有用的，就是当你改变了一个属性的值后，又想获取之前那个值时，可以使用 <code>previous</code> 函数。</p>
<notextile><figure class="highlight lang-javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="keyword">var</span> bill = <span class="keyword">new</span> Backbone.Model({name: <span class="string">&#39;Bill Smith&#39;</span>});

bill.on(<span class="string">&#39;change:name&#39;</span>, <span class="function"><span class="keyword">function</span> <span class="params">(model, name)</span> {</span>
    alert(<span class="string">&#39;Changed name from &#39;</span> + bill.previous(<span class="string">&#39;name&#39;</span>) + <span class="string">&#39;to&#39;</span> + name);
})

bill.set({name: <span class="string">&#39;Bill Jones&#39;</span>});
</pre></td></tr></table></figure></notextile>

<h2>关于本文</h2>
<p>为了学习 Backbone.js，网上找到了 <a href="http://backbonetutorials.com/"><a href="http://backbonetutorials.com/">http://backbonetutorials.com/</a></a> 这个网站。所以，边翻译边学，记录下来也是为了加深记忆。</p>
<h2>相关链接</h2>
<p><a href="http://backbonetutorials.com/what-is-a-model/">What is a model?</a></p>
<p><a href="http://backbonejs.org/#Model">Backbone.Model</a></p>
<p>基于版本：<a href="https://github.com/thomasdavis/backbonetutorials/tree/9e4aba0af8b56538e6cdda034770c4971a43c181">9e4aba0af8</a></p>
]]></content>
    <category scheme="http://blog.jkey.lu/tags/backbone/" term="backbone"/>
  </entry>
</feed>
